{
  
    
        "post0": {
            "title": "Unit 1-10 Vocab",
            "content": "Casting - Division: Round Division statement to the nearest integer. This can be used when a program can only handly integers | Casting - Rounding: Allows an equation to be rounded to the nearest integer, which can be very helpful | Wrapper Classes: Classes that can be created into a primtive type, such as int or boolean | . double one = 3.05; double two = 6.72; int three = (int) (two/one); int multi = (int) (one*two); System.out.println(three); System.out.println(multi); . 2 20 . Concatenation: The process of joining two strings together. The + operator is used to concatenate two strings together. | Java Math Class: The import java math class gives a lot of math operations and features that can be used in your code | Compound Boolean Expression: If/Else statement block | . // Concatenation String name = &quot;John&quot;; String lastName = &quot;Doe&quot;; System.out.println(name + &quot; &quot; + lastName); // Java Math Class import java.lang.Math; int max = 10; int min = 1; int range = max - min + 1; int rand = (int)(Math.random() * range) + min; System.out.println(rand); System.out.println(Math.sqrt(rand)); // Compound Boolean Expression if (true) { System.out.println(&quot;Hello&quot;); } else if (false) { System.out.println(&quot;World&quot;); } else { System.out.println(&quot;!&quot;); } . John Doe 6 2.449489742783178 Hello . Truth Table: A table where one column is each variable and another column for the possible value of the variable | De Morgans Law: Similar to Logic Gates from CSP. Talks about how || (or) and &amp;&amp; (and) | Comparing Numbers: Use the == operator to compare numbers | . // De Morgans Law if (!((true == true) &amp;&amp; (true == false))) { System.out.println(&quot;De Morgans law is true&quot;); } // Comparing Numbers int x = 1; int y = 2; if (x == y) { System.out.println(&quot;x is equal to y&quot;); } else if (x &gt; y) { System.out.println(&quot;x is greater than y&quot;); } else if (x &lt; y) { System.out.println(&quot;x is less than y&quot;); } else { System.out.println(&quot;x is not equal to y&quot;); } . De Morgans law is true x is less than y . Static Variables: Variables that are constant throughout the whole class. This can be beneficial when you need a variable to be able to be updated throughout the whole class | Inheritance: You can use extend method to get attributes from the class that is being extended from | . public class Test { public static int counter; public static void main(String[] args) { counter = counter + 1; System.out.println(counter); } } public class ExtendsTest extends Test { public static void main(String[] args) { counter = counter + 2; System.out.println(counter); } } Test testExample = new Test(); ExtendsTest extendsExample = new ExtendsTest(); testExample.main(null); extendsExample.main(null); . 1 3 . Polymorphism: Allows you to have multiple methods with the same name in one class. This allows you to have multiple ways to do something that is dependant on what is being passed in into the class. Overloading is when there are many methods that have different parameters | Overriding is when there is a method with the same name but you modify in subclass | Late binding is when the compiler chooses which method to use | . | . public class PolymorphismExample { public void yo(int x) { System.out.println(&quot;Integer: &quot; + x); } public void yo(String x) { System.out.println(&quot;String: &quot; + x); } public void yo(double x) { System.out.println(&quot;Double: &quot; + x); } } PolymorphismExample poly = new PolymorphismExample(); poly.yo(1); poly.yo(&quot;Hello&quot;); poly.yo(1.0); . Integer: 1 String: Hello Double: 1.0 . Abstract Class: Hiding certain details but making a barebones of something. For example, an abstract class could be car and then each class inherited would be like SUV or Truck. | Super Class: By using super class you can reference the upper class | . abstract class Car { public void hi() { System.out.println(&quot;Barebones Class&quot;); } } class SUV extends Car { public void hi() { System.out.println(&quot;The SUV is saying hi&quot;); } } class Truck extends Car { public void hi() { System.out.println(&quot;The truck is saying hi&quot;); } } // Instantiating the Car class would throw an error as it is abstract SUV suv = new SUV(); Truck truck = new Truck(); suv.hi(); truck.hi(); . The SUV is saying hi The truck is saying hi . Big O Notation: Big O notation is super helpful as it tells you how efficient your algorithm or program is. For example traversing an array would be O(n) because it depends on the size of n for how long the program will go. If you have a nested for loop then it would be O(n^2) because for each n you have another n. Hash map is O(1) and binary search is O(logn). | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/04/26/vocab.html",
            "relUrl": "/unit-work/2023/04/26/vocab.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson Homework",
            "content": "Unit 1 - Primitives . Basic data types in Java. Boolean, float, double, and short are just some examples. | Primitives are lowercase but non Primitives are uppercase | Casting allows you convert one type to a different type | You can convert a double or int to a String to display in System.out.println() | . 2006 FRQ 2a . public double purchasePrice() { total = 0; total = getListPrice() * (1+ taxRate); return total; } . 2006 FRQ 3a . public int compareCustomer(Customer other) { int numberCompare = getName().compareTo(other.getName()); if (numberCompare == 0) { return this.getID() - other.getID(); } else { return numberCompare; } } . Unit 2 - Using Objects . OOP is an object oriented programming language | classes are blueprint | objects are an instance of the created class | . Goblin Game . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; private double criticalHitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public double getCriticalHitChance(){ return criticalHitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } public void setCriticalHitChance(double newCriticalHitChance) { this.criticalHitChance = newCriticalHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { if (Math.random() &lt; attackerGoblin.getCriticalHitChance()){ attackeeGoblin.takeDMG(2*attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; lands a critical hit!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + 2*attackerGoblin.getDMG() + &quot; damage&quot;); } else{ attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.50); goblin1.setCriticalHitChance(0.1); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(1); goblin1.setCriticalHitChance(0.5); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey lands a critical hit! Gunther the great takes 4 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 Gunther the great has perished . Unit 3 - Boolean expressions . If statement is a conditional statement that when true it runs code in the code block | If statements have an else condition, where it will run if the code block in the beginning if statement is not True | Switch statements can replace a long if/else loop | | . 2009 FRQ 3b . public int getChargeStartTime(int chargeTime) { int time = 0; for (int i =1; i&lt; 24; i++) { if (this.getChargingCost(i, chargeTime) &lt; this.getChargingCost(time, chargeTime)) { time =i; } } return time; } . 2017 FRQ 1b . public boolean isStrictlyIncreasing() { for (int i =1; i &lt; digitList.size(); i++) { if (digitList.get(i-1) &lt; digitList.get(i)) { return true; } else { return false; } } } . 2019 FRQ 3b . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int numOpen =0; int numClosed = 0 for (int i =0; i &lt;delimiters.size(); i++) { if (delimiters.get(i).equals(openDel)) { numOpen++; } if (delimiters.get(i).equals(closeDel)) { numOpen++; } } if (numClosed == numOpen) { return true; } else { return false; } } . Unit 4 - Iteration . While Loop | For Loop | Recursive Loop | Used in most FRQ to help solve the overall goal | . Part 1 . import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JLabel; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.*; import java.awt.event.*; import java.util.Random; import javax.swing.JOptionPane; public class Gui implements ActionListener { JFrame frame = new JFrame(); JPanel panel = new JPanel(); JButton submitButton = new JButton(&quot;Submit&quot;); JTextField fieldString = new JTextField(20); JLabel label = new JLabel(); int numGuesses = 1; boolean numCorrect = false; Random rand = new Random(); int randomNumber = rand.nextInt(100); void go() { frame.add(panel); panel.add(fieldString); panel.add(submitButton); panel.add(label); frame.setVisible(true); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); submitButton.addActionListener(this); frame.setSize(new Dimension(500, 500)); label.setText(&quot;Enter a number between 1 and 100&quot;); } public static void main(String[] args) { Gui gui = new Gui(); gui.go(); } @Override public void actionPerformed(ActionEvent e) { int field = Integer.parseInt(fieldString.getText()); System.out.println(randomNumber); System.out.println(field); if (numCorrect == false) { if (field &gt; randomNumber) { JOptionPane.showMessageDialog(null, &quot;Guess too high, try again. Amount of Guesses: &quot; + numGuesses); numGuesses += 1; fieldString.setText(&quot;&quot;); } else if (field &lt; randomNumber) { JOptionPane.showMessageDialog(null, &quot;Guess too low, try again. Amount of Guesses: &quot; + numGuesses); numGuesses += 1; fieldString.setText(&quot;&quot;); } else if (field == randomNumber) { JOptionPane.showMessageDialog(null, &quot;Correct Guess. Amount of Guesses: &quot; + numGuesses); numCorrect = true; System.exit(0); } } } } Gui.main(null); . Part 2 . Unit 5 - Writing Classes . Object is the instance of a class | Class is the overall blueprint of the thing | Methods are functions or behaviors that the objects do | Constructors initiailize some of the private variables and creates object | Some variables might be private so you need getter and setter methods to access and modify the data | . 2021 1a . public int scoreGuess (String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length() * guess.length(); } . 2021 3a . public void addMembers(String[] names, int gradYear ) { for( String n : names ) { memberList.add(new MemberInfo( n, gradYear, true) ); } } . Unit 6 - Arrays . ArrayList in java | Use a for loop to acces an array | bound errors or uninitialized and unfilled arrays are usual errors | Enhanced loop to traverse array | int[] array = new int[5]; int[] array = [10, 2, 3, 4, 5]; | CollegeBoard will usually have a for loop and skip iterations and change the value of variable | . import java.util.ArrayList; public class ArrayHW { ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;(); public void initialize() { for (int i = 0; i &lt; 10; i++) { values.add(i); } } public void printEven() { for (int i = 0; i &lt; values.size(); i++) { if (values.get(i) % 2 == 0) { values.set(i, 0); System.out.print(values.get(i)); } else { System.out.print(values.get(i)); } } } public void swap(){ int lastElement = values.get(values.size()-1); values.set(values.size()-1, values.get(0)); values.set(0, lastElement); for (int i = 0; i &lt; values.size(); i++) { System.out.print(values.get(i)); } } public void print() { for (int i = 0; i &lt; values.size(); i++) { System.out.print(values.get(i)); } } public static void main(String[] args) { ArrayHW arrayHW = new ArrayHW(); System.out.println(&quot;Initializing&quot;); arrayHW.initialize(); arrayHW.print(); System.out.println(&quot; nPrinting Even&quot;); arrayHW.printEven(); System.out.println(&quot; nSwapping Elements&quot;); arrayHW.swap(); } } ArrayHW.main(null); . Initializing 0123456789 Printing Even 0103050709 Swapping Elements 9103050700 . Unit 7 - Arraylists . ArrayList name = new ArrayList();&lt;/li&gt; name.add(value) | name.remove(value) | name.size() | Collections.sort(name) | You can use iteration to traverse the arraylist and find values | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import java.util.ArrayList; import java.util.Collections; import java.util.Random; ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(); Random rand = new Random(); for (int i =0; i&lt; 10; i++) { int random_int = rand.nextInt(10); arr.add(i * random_int); } public void print(ArrayList&lt;Integer&gt; idk) { for (int i = 0; i &lt; idk.size(); i++) { System.out.print(idk.get(i) + &quot; &quot;); } System.out.println(); } print(arr); // HashCode DIsply System.out.println(&quot;Hash map before operation: &quot;+ arr.hashCode()); Collections.sort(arr); System.out.println(&quot;Hash map after operation: &quot;+ arr.hashCode()); // Swap first and last element int temp = arr.get(0); int temp2 = arr.get(arr.size() -1); arr.set(0, temp2); arr.set(arr.size() - 1, temp); System.out.print(&quot;Swapped First and Last Element: &quot;); print(arr); // sort in descending order Collections.sort(arr, Collections.reverseOrder()); System.out.print(&quot;Sort in Descending: &quot;); print(arr); . 0 9 0 18 16 30 36 63 24 9 Hash map before operation: -1602069450 Hash map after operation: 876473092 Swapped First and Last Element: 63 0 9 9 16 18 24 30 36 0 Sort in Descending: 63 36 30 24 18 16 9 9 0 0 . Unit 9 - Inheritance . Super class: takes attribute from the super class | Polymorphism: gives a method a way to be in different forms for each class | public class A | public class B extends A | . public class Worldcup { //superclass int wins = 0; int losses = 0; boolean cool; public Worldcup(int wins, int losses, boolean cool){ this.wins = wins; this.losses = losses; this.cool = cool; } public String toString(){ return &quot;Wins: &quot; + this.wins + &quot;, Losses: &quot; + this.losses + &quot;, Cool?: &quot; + this.cool; } } public class Argentina extends Worldcup { public Argentina(int wins, int losses, boolean cool) { super(wins, losses,cool); } public static void main(String[] args) { Argentina argobj = new Argentina(3,1,true); System.out.println(argobj.toString()); } } public class Brazil extends Worldcup { public Brazil(int wins, int losses, boolean cool) { super(wins, losses,cool); } public static void main(String[] args) { Argentina argobj = new Argentina(4,2,true); System.out.println(argobj.toString()); } } Argentina.main(null); Brazil.main(null); . Wins: 3, Losses: 1, Cool?: true Wins: 4, Losses: 2, Cool?: true . public class Person { private String name; private int age; public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return this.name; } public int getAge() { return this.age; } } public class Student extends Person { private String extra; public Student(String name, int age, String extra) { super(name, age); this.extra = extra; } public String getExtra() { return this.extra; } @Override public String toString(){ return &quot;Name: &quot; + getName() + &quot;, Age: &quot; + getAge() + &quot;, Extra: &quot; + getExtra(); } } public class Main{ public static void main(String[] args){ Student bro = new Student(&quot;bro&quot;, 16, &quot;Basketball&quot;); System.out.println(bro.toString()); } } Main.main(null); . Name: bro, Age: 16, Extra: Basketball . &lt;/div&gt; | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/04/26/homework.html",
            "relUrl": "/unit-work/2023/04/26/homework.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "CodeMonkey's Hacks",
            "content": "All Elements to n . public class ElementN { public void changeArray(int[] array, int n) { for (int i = 0; i &lt; array.length; i++) { array[i] = n; } } public static void main(String[] args) { ElementN elementN = new ElementN(); int[] array = {1, 2, 3, 4, 5}; System.out.println(Arrays.toString(array)); elementN.changeArray(array, 10); System.out.println(Arrays.toString(array)); } } ElementN.main(null); . [1, 2, 3, 4, 5] [10, 10, 10, 10, 10] . Average of Array . public class FindAverage { public double findAverage(ArrayList&lt;Integer&gt; arr) { int sum = 0; for (int i =0; i&lt; arr.size(); i++) { sum += arr.get(i); } return (double) sum / arr.size(); } public static void main(String[] args) { FindAverage average = new FindAverage(); ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;(); arr.add(1); arr.add(2); arr.add(3); System.out.println(arr); System.out.println(average.findAverage(arr)); } } FindAverage.main(null); . [1, 2, 3] 2.0 . Find Average of Diagonal . public class AverageDiagonal { public double findAverage(int[][] arr) { int sum = 0; for (int i = 0; i &lt; arr.length; i++) { for (int j = 0; j &lt; arr[0].length - i; j++) { if (i == j) { sum += arr[i][j]; } } } return (double) sum / arr.length; } public static void main(String[] args) { AverageDiagonal average = new AverageDiagonal(); int[][] arr = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; System.out.println(Arrays.deepToString(arr)); System.out.println(average.findAverage(arr)); } } AverageDiagonal.main(null); . [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 2.0 .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/04/26/codemonkey.html",
            "relUrl": "/unit-work/2023/04/26/codemonkey.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Codelingo Hacks",
            "content": "Recursion hack . public void drawLine(int n) { if (n &lt; 1) { return; } for (int i = 1; i &lt;= n; i++) { System.out.print(&quot;*&quot;); } System.out.println(); drawLine(n - 1); } drawLine(10); . ********** ********* ******** ******* ****** ***** **** *** ** * . Sorting hack . public class Country { private String name; private int population; public Country(String name, int population) { this.name = name; this.population = population; } public String getName() { return name; } public int getPopulation() { return population; } public int compareCountry(Country c) { if (this.getPopulation() &gt; c.getPopulation()) { return 1; } else if (this.getPopulation() &lt; c.getPopulation()) { return -1; } else { return 0; } } } public class SelectionSort { public void sort(Country[] arr) { for (int i = 0; i &lt; arr.length-1; i++) { int min_idx = i; for (int j = i+1; j &lt; arr.length; j++) { // use compare country, only set min_idx if -1 (smaller pop) if (arr[j].compareCountry(arr[min_idx]) == -1) min_idx = j; } // assign temp country to swap Country temp = arr[min_idx]; arr[min_idx] = arr[i]; arr[i] = temp; } } public static void main(String[] args) { Country[] countries = new Country[5]; countries[0] = new Country(&quot;USA&quot;, 100); countries[1] = new Country(&quot;China&quot;, 200); countries[2] = new Country(&quot;Japan&quot;, 50); countries[3] = new Country(&quot;Korea&quot;, 75); countries[4] = new Country(&quot;India&quot;, 150); SelectionSort ss = new SelectionSort(); ss.sort(countries); for (int i = 0; i &lt; countries.length; i++) { System.out.println(countries[i].getName() + &quot; &quot; + countries[i].getPopulation()); } } } SelectionSort.main(null); . Japan 50 Korea 75 USA 100 India 150 China 200 . Arraylist hack . public class CompareArrays { public Boolean compare(ArrayList&lt;Integer&gt; arr1, ArrayList&lt;Integer&gt; arr2) { if (arr1.size() != arr2.size()) { return false; } for (int i = 0; i &lt; arr1.size(); i++) { if (arr1.get(i) != arr2.get(arr2.size() - i - 1)) { return false; } } return true; } public static void main(String[] args) { ArrayList&lt;Integer&gt; arr1 = new ArrayList&lt;Integer&gt;(); arr1.add(1); arr1.add(2); arr1.add(3); ArrayList&lt;Integer&gt; arr2 = new ArrayList&lt;Integer&gt;(); arr2.add(3); arr2.add(2); arr2.add(1); CompareArrays ca = new CompareArrays(); System.out.println(arr1); System.out.println(arr2); System.out.println(&quot;Are they the same array reversed? &quot; + ca.compare(arr1, arr2)); } } CompareArrays.main(null); . [1, 2, 3] [3, 2, 1] Are they the same array reversed? true . public class Remove { public void remove(ArrayList&lt;Integer&gt; arr) { for (int i = 0; i &lt; arr.size(); i++) { if (arr.get(i) % 2 == 0) arr.remove(i); } } public static void main(String[] args) { ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;(); arr.add(1); arr.add(2); arr.add(3); arr.add(4); arr.add(5); arr.add(6); Remove r = new Remove(); System.out.println(arr); r.remove(arr); System.out.println(arr); } } Remove.main(null); . [1, 2, 3, 4, 5, 6] [1, 3, 5] .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/04/26/codelingo.html",
            "relUrl": "/unit-work/2023/04/26/codelingo.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "APCSA Judge0 Documentation",
            "content": "What is Judge0 . Judge0 is an open-source online code execution and grading system that allows you to run code in more than 50 programming languages. . The Judge0 grading server is a component of the Judge0 system that is responsible for executing and evaluating the submitted code. When a user submits their code, the grading server compiles and runs it on a secure and isolated environment to ensure that it does not harm the system or other users. The grading server then checks the output of the code against the expected output to determine whether the submission is correct. . How it works . Sending a submission . To send a submission to the grading server, you need to make a POST request to the /submissions endpoint. The request body should contain at least the following fields: . source_code - the source code of the submission | language_id - the ID of the programming language that the source code is written in | . Other options that may be helpful are: . stdin - the input that should be sent to the program | expected_output - the expected output of the program | cpu_time_limit - the maximum amount of time that the program can run for | . It will return a JSON object with the most notable field being: . token - the token that can be used to get the status of the submission | . Example of how it would look sending a submission to the server from JavaScript: . // btoa is what allows us to encode the code in base64 YOUR_BASE64_ENCODED_CODE = btoa(code); const API_URL = &quot;https://judge0.nighthawkcodingsociety.com/&quot;; const headers = { &quot;content-type&quot;: &quot;application/json&quot;, }; const data = { source_code: code, language_id: 62, // Java language ID stdin: &quot;&quot;, }; fetch(API_URL + &quot;submissions&quot;, { method: &quot;POST&quot;, headers: headers, mode: &quot;cors&quot;, cache: &quot;no-cache&quot;, body: JSON.stringify(data), }) .then((response) =&gt; response.text()) .then((data) =&gt; { // handle the data output, use this token to get the status of the submission const token = data.token; /* this is where the interval code goes, see below */ }) .catch((error) =&gt; { // error handling }); . Getting the status of a submission . To get the status of a submission, you need to make a GET request to the /submissions/:token endpoint. The :token part of the URL should be replaced with the token that was returned when the submission was sent. . // We need an interval because the submission needs to keep polling the server to see if it has compiled yet let interval = setInterval(() =&gt; { fetch(API_URL + `submissions/${submissionId}?base64_encoded=true`, { headers: headers, }) .then((response) =&gt; response.json()) .then((data) =&gt; { if (data.status.id &lt;= 2) { // Status is either &quot;queued&quot; or &quot;processing&quot; console.log(&quot;Status: &quot; + data.status.description); } else { // Status is &quot;completed&quot; clearInterval(interval); const output = atob(data.stdout); console.log(&quot;Output: &quot; + output); } }) .catch((error) =&gt; { // Status is usually &#39;Compilation Error&#39; or &#39;Runtime Error&#39; console.error(error); }); }, 1000); . Backend Implementation . If you decide to do backend implementation in Java, then we recommend using the rapidAPI suggestions for creating a submission and getting the status of a submission. Simply replace the url of the rapid api with the url of your judge0 server, and you don’t need the rapidAPI keys and headers. . CORS Issues . You may also run into an issue with CORS when using the server from a different domain. To fix this, we recommend adding this to your java files. . SecurityConfig.java . .cors().and() .headers() .addHeaderWriter(new StaticHeadersWriter(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;)) .addHeaderWriter(new StaticHeadersWriter(&quot;Access-Control-Allow-ExposedHeaders&quot;, &quot;https://YOUR_FRONTEND_USERNAME.github.io&quot;, &quot;Authorization&quot;)) .addHeaderWriter(new StaticHeadersWriter(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type&quot;, &quot;Authorization&quot;, &quot;x-csrf-token&quot;)) .addHeaderWriter(new StaticHeadersWriter(&quot;Access-Control-Allow-MaxAge&quot;, &quot;600&quot;)) .addHeaderWriter(new StaticHeadersWriter(&quot;Access-Control-Allow-Methods&quot;, &quot;POST&quot;, &quot;GET&quot;, &quot;OPTIONS&quot;, &quot;HEAD&quot;)) .addHeaderWriter(new StaticHeadersWriter(&quot;Access-Control-Allow-Origin&quot;, &quot;https://YOUR_FRONTEND_USERNAME.github.io&quot;)) . MvcConfig.java . @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(&quot;/**&quot;).allowedOrigins(&quot;https://YOUR_FRONTEND_USERNAME.github.io&quot;); } . Nginx Config File on Server . if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Credentials&quot; &quot;true&quot;; add_header &quot;Access-Control-Allow-Origin&quot; &quot;https://YOUR_FRONTEND_USERNAME.github.io&quot;; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, HEAD&quot;; add_header &quot;Access-Control-Allow-MaxAge&quot; 600; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Content-Type, Authorization, x-csrf-token&quot;; return 200; } .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/markdown/2023/04/21/judge0.html",
            "relUrl": "/markdown/2023/04/21/judge0.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "CheckPoint 3",
            "content": "Sorting . public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } public class Stack&lt;T&gt; { private LinkedList&lt;T&gt; upper; private int size; // constructor initiates null LinkedList&lt;T&gt; object + set size to 0 public Stack() { this.upper = null; this.size = 0; } // push method for a new element to the upper value public void push(T data) { LinkedList&lt;T&gt; newNode = new LinkedList&lt;T&gt;(data, this.upper); this.upper = newNode; this.size++; } // peek method, return upper public T peek() { // try/catch to either return upper or print message if upper doesn&#39;t exist try { return this.upper.getData(); } catch (NullPointerException e) { System.out.println(&quot;No upper element, empty stack!&quot;); return null; } } // pop method, return upper and remove public T pop() { // try/catch to either return + pop upper or print message if upper doesn&#39;t exist try { T data = this.upper.getData(); this.upper = this.upper.getPrevious(); this.size--; return data; } catch (NullPointerException e) { System.out.println(&quot;No upper element, empty stack!&quot;); return null; } } // get size method public int size() { return this.size; } // isEmpty method, compare size to 0 public boolean isEmpty() { return this.size == 0; } // toString method, from top to bottom public String toString() { String s = &quot;[ &quot;; LinkedList&lt;T&gt; currentNode = upper; // gets upper node, then keeps going down to previous until previous is null while (currentNode != null) { s += currentNode.getData(); currentNode = currentNode.getPrevious(); if (currentNode != null) { s += &quot;, &quot;; } } s += &quot; ]&quot;; return s; } public void bubbleSort() { // if size is 0 or 1, don&#39;t sort if (this.size &lt;= 1) { return; } // create a new stack to hold sorted values Stack&lt;T&gt; sorted = new Stack&lt;T&gt;(); while (!this.isEmpty()) { // empty stack by popping T temp = this.pop(); // checks if temp is smaller than the top of sorted while (!sorted.isEmpty() &amp;&amp; ((Comparable&lt;T&gt;) sorted.peek()).compareTo(temp) &gt; 0) { // pop from sorted and push this.push(sorted.pop()); } // push temp into sorted sorted.push(temp); } // if sorted still has elements, pop and push to this while (!sorted.isEmpty()) { this.push(sorted.pop()); } } public void selectionSort() { // if size is 0 or 1, don&#39;t sort if (this.size &lt;= 1) { return; } // create a new stack to hold sorted values Stack&lt;T&gt; sorted = new Stack&lt;T&gt;(); while (!this.isEmpty()) { // empty stack by popping T temp = this.pop(); // checks if temp is smaller than the top of sorted while (!sorted.isEmpty() &amp;&amp; ((Comparable&lt;T&gt;) sorted.peek()).compareTo(temp) &gt; 0) { // pop from sorted and push this.push(sorted.pop()); } // push temp into sorted sorted.push(temp); } // if sorted still has elements, pop and push to this while (!sorted.isEmpty()) { this.push(sorted.pop()); } } } public class Tester { public static void main(String[] args) { Stack&lt;Integer&gt; s1 = new Stack&lt;Integer&gt;(); Stack&lt;Integer&gt; s2 = new Stack&lt;Integer&gt;(); // add objects to queue and print both s1.push(1); s1.push(5); s1.push(3); s1.push(4); s1.push(2); s2.push(1); s2.push(5); s2.push(3); s2.push(4); s2.push(2); System.out.println(&quot;We are using Bubble Sort&quot;); System.out.println(s1.toString()); s1.bubbleSort(); System.out.println(s1.toString()); System.out.println(&quot;We are using Selection Sort&quot;); System.out.println(s2.toString()); s2.selectionSort(); System.out.println(s2.toString()); } } Tester.main(null); . We are using Bubble Sort [ 2, 4, 3, 5, 1 ] [ 1, 2, 3, 4, 5 ] We are using Selection Sort [ 2, 4, 3, 5, 1 ] [ 1, 2, 3, 4, 5 ] . Collectables . public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Sport extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Sport.key = key;} public enum KeyType implements KeyTypes {title, name, date, color} // Instance data private final String name; private final int date; private final String color; // Constructor Sport(String name, int date, String color) { this.setType(&quot;Sport&quot;); this.name = name; this.date = date; this.color = color; } /* &#39;Collectable&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Sport.key; } /* &#39;Collectable&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.date.equals(this.getKey())) { output += this.date; } else if (KeyType.color.equals(this.getKey())) { output += this.color; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.date + &quot;, &quot; + this.color; } return output; } // Test data initializer public static Sport[] sports() { return new Sport[]{ new Sport(&quot;Basketball&quot;, 1946, &quot;Orange&quot;), new Sport(&quot;Baseball&quot;, 1876, &quot;White&quot;), new Sport(&quot;Football&quot;, 1920, &quot;Brown&quot;), new Sport(&quot;Soccer&quot;, 1863, &quot;Black or White&quot;), new Sport(&quot;Hockey&quot;, 1917, &quot;Black&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Sport[] objs = sports(); // Array is reference type only, no methods List&lt;Sport&gt; sports = new ArrayList&lt;Sport&gt;(Arrays.asList(objs)); // conversion required to make it a Collection // print with title Sport.setOrder(KeyType.title); Sport.print(objs); // convert to Coolection and sort in flavor order Sport.setOrder(KeyType.name); Collections.sort(sports); // This works because of Collectable compareTo method Sport.setOrder(KeyType.title); for (Sport sport : sports) System.out.println(sport); } } Sport.main(null); . class [LREPL.$JShell$21B$Sport; 5 Collectable: Sport listed by title Sport: Basketball, 1946, Orange Sport: Baseball, 1876, White Sport: Football, 1920, Brown Sport: Soccer, 1863, Black or White Sport: Hockey, 1917, Black Sport: Baseball, 1876, White Sport: Basketball, 1946, Orange Sport: Football, 1920, Brown Sport: Hockey, 1917, Black Sport: Soccer, 1863, Black or White . Big 0 Complexity . public class SortingAnalyzing { // create a random array of size 5000 public static int[] randomArray() { int[] array = new int[5000]; for (int i = 0; i &lt; array.length; i++) { array[i] = (int) (Math.random() * 10000); } return array; } // bubble sort with input array public static void bubbleSort(int[] array) { for (int i = 0; i &lt; array.length; i++) { for (int j = 0; j &lt; array.length - 1; j++) { if (array[j] &gt; array[j + 1]) { int temp = array[j]; array[j] = array[j + 1]; array[j + 1] = temp; } } } } // selection sort with input array public static void selectionSort(int[] array) { for (int i = 0; i &lt; array.length; i++) { int min = i; for (int j = i + 1; j &lt; array.length; j++) { if (array[j] &lt; array[min]) { min = j; } } int temp = array[i]; array[i] = array[min]; array[min] = temp; } } // merge sort with input array public static void mergeSort(int[] array) { if (array.length &gt; 1) { int[] left = leftHalf(array); int[] right = rightHalf(array); mergeSort(left); mergeSort(right); merge(array, left, right); } } public static int[] leftHalf(int[] array) { int size1 = array.length / 2; int[] left = new int[size1]; for (int i = 0; i &lt; size1; i++) { left[i] = array[i]; } return left; } public static int[] rightHalf(int[] array) { int size1 = array.length / 2; int size2 = array.length - size1; int[] right = new int[size2]; for (int i = 0; i &lt; size2; i++) { right[i] = array[i + size1]; } return right; } public static void merge(int[] result, int[] left, int[] right) { int i1 = 0; int i2 = 0; for (int i = 0; i &lt; result.length; i++) { if (i2 &gt;= right.length || (i1 &lt; left.length &amp;&amp; left[i1] &lt;= right[i2])) { result[i] = left[i1]; i1++; } else { result[i] = right[i2]; i2++; } } } // insertion sort with input array public static void insertionSort(int[] array) { for (int i = 1; i &lt; array.length; i++) { int current = array[i]; int j = i - 1; while (j &gt;= 0 &amp;&amp; current &lt; array[j]) { array[j + 1] = array[j]; j--; } array[j + 1] = current; } } // create main method and call all the methods on the random array and then print the time taken and then do this for 12 times. When listing out make it in a table format. Also list out the average time for each public static void main(String[] args) { int[] average_times = new int[4]; for (int i = 0; i &lt; 12; i++) { int[] array = randomArray(); long startTime = System.currentTimeMillis(); bubbleSort(array); long endTime = System.currentTimeMillis(); long time = endTime - startTime; average_times[0] += time; System.out.println(&quot;Time taken for bubble sort is &quot; + time + &quot; milliseconds&quot;); array = randomArray(); startTime = System.currentTimeMillis(); selectionSort(array); endTime = System.currentTimeMillis(); time = endTime - startTime; average_times[1] += time; System.out.println(&quot;Time taken for selection sort is &quot; + time + &quot; milliseconds&quot;); array = randomArray(); startTime = System.currentTimeMillis(); mergeSort(array); endTime = System.currentTimeMillis(); time = endTime - startTime; average_times[2] += time; System.out.println(&quot;Time taken for merge sort is &quot; + time + &quot; milliseconds&quot;); array = randomArray(); startTime = System.currentTimeMillis(); insertionSort(array); endTime = System.currentTimeMillis(); time = endTime - startTime; average_times[3] += time; System.out.println(&quot;Time taken for insertion sort is &quot; + time + &quot; milliseconds&quot;); } System.out.println(&quot;Average time taken for bubble sort is &quot; + average_times[0] / 12 + &quot; milliseconds&quot;); System.out.println(&quot;Average time taken for selection sort is &quot; + average_times[1] / 12 + &quot; milliseconds&quot;); System.out.println(&quot;Average time taken for merge sort is &quot; + average_times[2] / 12 + &quot; milliseconds&quot;); System.out.println(&quot;Average time taken for insertion sort is &quot; + average_times[3] / 12 + &quot; milliseconds&quot;); } } SortingAnalyzing.main(null); . Time taken for bubble sort is 18 milliseconds Time taken for selection sort is 12 milliseconds Time taken for merge sort is 0 milliseconds Time taken for insertion sort is 1 milliseconds Time taken for bubble sort is 17 milliseconds Time taken for selection sort is 12 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Time taken for bubble sort is 18 milliseconds Time taken for selection sort is 12 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Time taken for bubble sort is 18 milliseconds Time taken for selection sort is 12 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Time taken for bubble sort is 18 milliseconds Time taken for selection sort is 12 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Time taken for bubble sort is 17 milliseconds Time taken for selection sort is 12 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Time taken for bubble sort is 18 milliseconds Time taken for selection sort is 12 milliseconds Time taken for merge sort is 0 milliseconds Time taken for insertion sort is 1 milliseconds Time taken for bubble sort is 18 milliseconds Time taken for selection sort is 7 milliseconds Time taken for merge sort is 0 milliseconds Time taken for insertion sort is 1 milliseconds Time taken for bubble sort is 17 milliseconds Time taken for selection sort is 7 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Time taken for bubble sort is 19 milliseconds Time taken for selection sort is 7 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Time taken for bubble sort is 18 milliseconds Time taken for selection sort is 7 milliseconds Time taken for merge sort is 0 milliseconds Time taken for insertion sort is 1 milliseconds Time taken for bubble sort is 17 milliseconds Time taken for selection sort is 7 milliseconds Time taken for merge sort is 1 milliseconds Time taken for insertion sort is 2 milliseconds Average time taken for bubble sort is 17 milliseconds Average time taken for selection sort is 9 milliseconds Average time taken for merge sort is 0 milliseconds Average time taken for insertion sort is 1 milliseconds . HashMap . import java.util.*; public class MapTester { public static void main(String[] args) { HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); int[] array = new int[1000000]; for (int i = 0; i &lt; array.length; i++) { Integer value = (int) (Math.random() * 1000000); array[i] = value; map.put(value, value); } Scanner input = new Scanner(System.in); System.out.println(&quot;Enter a number between 0 and 999999&quot;); // do for loop 12 times and then print out the average time for map lookup and binary search and list it out in a table format for (int i = 0; i &lt; 12; i++) { Integer val = input.nextInt(); long time = mapLookup(map, val); System.out.println(&quot;Time taken for map lookup is &quot; + time + &quot; milliseconds&quot;); time = binarySearch(array, val); System.out.println(&quot;Time taken for binary search is &quot; + time + &quot; milliseconds&quot;); } } // method that returns time it takes to tdo lookup in a map public static long mapLookup(HashMap&lt;Integer, Integer&gt; map, Integer val) { long startTime = System.currentTimeMillis(); map.containsKey(val); long endTime = System.currentTimeMillis(); long time = endTime - startTime; return time; } // binary search method that is handwritten that takes array and value and returns time it takes to do binary search public static long binarySearch(int[] array, Integer val) { long startTime = System.currentTimeMillis(); int low = 0; int high = array.length - 1; while (high &gt;= low) { int mid = (low + high) / 2; if (array[mid] == val) { long endTime = System.currentTimeMillis(); long time = endTime - startTime; return time; } else if (array[mid] &lt; val) { low = mid + 1; } else { high = mid - 1; } } long endTime = System.currentTimeMillis(); long time = endTime - startTime; return time; } } MapTester.main(null); . Enter a number between 0 and 999999 Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds Time taken for map lookup is 0 milliseconds Time taken for binary search is 0 milliseconds . Pros and Cons . Collection HashMap . Pros | Pros | . + Simple and easy to use | + Fast access and retrieval | . + Good for storing and | + Efficient for large data sets | . iterating over small | + Provides key-value pairs | . data sets | + No duplicates allowed | . + Allows duplicates | | . | | . Cons | Cons | . - Slower access and retrieval | - More complex to use | . - No efficient key-based | - More memory-intensive | . access | - Not thread-safe | . - No guarantee of order | - Requires more code for | . | iteration | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/04/04/checkpoint3.html",
            "relUrl": "/unit-work/2023/04/04/checkpoint3.html",
            "date": " • Apr 4, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "CSUSM Extra Credit",
            "content": "Presenters . John - Originally from Escondido and went to community college before transferring to CSUSM Ashley - Originally from Palm Springs and then went to CSUSM Date Presented: 03/28/2023 . Clubs and Organizations . CyberSecurity Club | Robotics Club | 3D printing club | Women in STEM | . Pathways . Physics | Chemistry | Software Engineering | Electrical Engineering | Math | Biological Studies | . Internships . Vital for being successful in college | Always aim for paid internships because they are more valuable and you deserve to get paid for the work you are doing | NETWORKING | Go to campus events and interact with people and put yourself out there | Google has also great resources for finding internships | . Paying for College . First, be on top of it and it’s up to you to find the resources | Two types of loans out there: Subsidized and Unsubsidized | Subsidized: Government pays the interest while you are in school | Unsubsidized: You pay the interest while you are in school | FAFSA and studentaid.gov are great resources for finding financial aid | Scholarships are also great resources for paying for college | . Overall Thoughts and Reflection . The presentation given by two CSUSM alumni was informative and engaging. The presenters, who were also ambassadors from the university, shared their personal experiences and success stories, which made the presentation more relatable and inspiring. . The presenters also provided valuable information about CSUSM and its pathways, including the various majors available to students, such as Applied Physics, Chemistry and Biochemistry, Biotechnology, Biological Studies, Math, Computer Science, Software Engineering, and Electrical Engineering. They also talked about the various clubs and organizations available to students, including Cyber Security club, Robotics club, Women in STEM, Society of Physics Students, and National Society of Black Engineers, among others. This helped to demonstrate the various opportunities available to students at CSUSM and the various pathways they can pursue. . Furthermore, the presentation provided practical advice on how to find internships and programs, including joining clubs, checking emails, attending campus events, and using Google to search for opportunities. The presenters also emphasized the importance of avoiding unpaid internships and highlighted some paid programs, such as the Summer Scholar Program and Quantum Bridge Program. I really liked this part because it helps show to me that there are many opportunities out there and it is up to me to find them and put myself out there. In the end, it is up to me to make the most of my college experience and take advantage of the various opportunities available to me. . Finally, the presentation covered the topic of paying for college, including the two types of loans available, subsidized and unsubsidized, and the various scholarships and grants available to students. The presenters advised students to apply for FAFSA and check their student email for scholarship opportunities sent by the school or their department. I also liked this because if I want to go to college, I need to be on top of it and find the resources available to me. I need to be proactive and not wait for opportunities to come to me but instead find these opportunities. . Overall, the presentation was informative and engaging, providing valuable insights into the various opportunities available to students at CSUSM and practical advice on how to pursue their career goals. I really enjoyed the presentation and I think advice about internships was the one that resonated with me the most. Internships are a great way to learn and try out different workflows for different companies. Something I have always wanted to do and will definitely be proactive in finding them when I go to college. .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/markdown/2023/03/28/csusm.html",
            "relUrl": "/markdown/2023/03/28/csusm.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Merge Queues",
            "content": "import java.util.LinkedList; import java.util.Queue; public class MergeQueues&lt;T&gt; { private Queue&lt;T&gt; queue1; private Queue&lt;T&gt; queue2; public MergeQueues(Queue&lt;T&gt; queue1, Queue&lt;T&gt; queue2) { this.queue1 = queue1; this.queue2 = queue2; } public Queue&lt;T&gt; merge() { Queue&lt;T&gt; result = new LinkedList&lt;&gt;(); while (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) { if (queue1.peek().hashCode() &lt; queue2.peek().hashCode()) { result.add(queue1.poll()); } else { result.add(queue2.poll()); } } while (!queue1.isEmpty()) { result.add(queue1.poll()); } while (!queue2.isEmpty()) { result.add(queue2.poll()); } return result; } public static void main(String[] args) { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;&gt;(); Queue&lt;Integer&gt; queue2 = new LinkedList&lt;&gt;(); queue1.add(1); queue1.add(3); queue1.add(5); queue2.add(2); queue2.add(4); queue2.add(6); System.out.println(&quot;Queue 1: &quot; + queue1); System.out.println(&quot;Queue 2: &quot; + queue2); MergeQueues&lt;Integer&gt; merger = new MergeQueues&lt;&gt;(queue1, queue2); Queue&lt;Integer&gt; mergedQueue = merger.merge(); System.out.println(&quot;Merged Queue: &quot; + mergedQueue); } } MergeQueues.main(null); . Queue 1: [1, 3, 5] Queue 2: [2, 4, 6] Merged Queue: [1, 2, 3, 4, 5, 6] . Sorting Algorithm . public class SortingAlgos { public static void bubbleSort(int[] arr) { for (int i =0; i &lt; arr.length; i++) { // Loop through the array for (int j = 0; j &lt; arr.length - i - 1; j++) { if (arr[j] &gt; arr[j + 1]) { // Check to see if the next element is greater than the current element int temp = arr[j]; // Swap the elements arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } } public static void insertionSort(int[] array) { for (int i = 1; i &lt; array.length; i++) { // Loop through the array int key = array[i]; // Set the key to the current element int j = i - 1; // Set j to the previous element while (j &gt;= 0 &amp;&amp; array[j] &gt; key) { // Loop through the array until the previous element is less than the key array[j + 1] = array[j]; // Set the next element to the current element j = j - 1; } // Set the next element to the key array[j + 1] = key; } } public static void main(String[] args) { int[] arr = { 5, 4, 3, 2, 1 }; bubbleSort(arr); System.out.println(Arrays.toString(arr)); int[] arr2 = { 5, 4, 3, 2, 1 }; insertionSort(arr2); System.out.println(Arrays.toString(arr2)); } } SortingAlgos.main(null); . [1, 2, 3, 4, 5] [1, 2, 3, 4, 5] . Shuffle Queue . import java.util.*; public class ShuffleQueue { public static void main(String[] args) { Queue&lt;Integer&gt; orderedQueue = new LinkedList&lt;&gt;(); orderedQueue.add(1); orderedQueue.add(2); orderedQueue.add(3); orderedQueue.add(4); orderedQueue.add(5); orderedQueue.add(6); orderedQueue.add(7); orderedQueue.add(8); orderedQueue.add(9); orderedQueue.add(10); Queue&lt;Integer&gt; shuffledQueue = shuffle(orderedQueue); System.out.println(&quot;Original queue: &quot; + orderedQueue); System.out.println(&quot;Shuffled queue: &quot; + shuffledQueue); } public static &lt;T&gt; Queue&lt;T&gt; shuffle(Queue&lt;T&gt; queue) { List&lt;T&gt; list = new ArrayList&lt;&gt;(queue); Collections.shuffle(list); Queue&lt;T&gt; shuffledQueue = new LinkedList&lt;&gt;(list); return shuffledQueue; } } ShuffleQueue.main(null); . Original queue: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Shuffled queue: [10, 3, 9, 1, 5, 6, 2, 4, 8, 7] . Merge Stacks . import java.util.Stack; public class StackMerger { public static Stack&lt;Integer&gt; merge(Stack&lt;Integer&gt; stack1, Stack&lt;Integer&gt; stack2) { Stack&lt;Integer&gt; result = new Stack&lt;&gt;(); while (!stack1.isEmpty() &amp;&amp; !stack2.isEmpty()) { // Loop through the stacks if (stack1.peek() &lt; stack2.peek()) { // Check to see if the top of stack1 is less than the top of stack2 result.push(stack1.pop()); } else { // Otherwise, push the top of stack2 to the result stack result.push(stack2.pop()); } } while (!stack1.isEmpty()) { // Push the remaining elements of stack1 to the result stack result.push(stack1.pop()); } while (!stack2.isEmpty()) { // Push the remaining elements of stack2 to the result stack result.push(stack2.pop()); } return result; } public static void main(String[] args) { // Create two stacks Stack&lt;Integer&gt; stack1 = new Stack&lt;&gt;(); stack1.push(5); stack1.push(3); stack1.push(1); Stack&lt;Integer&gt; stack2 = new Stack&lt;&gt;(); stack2.push(6); stack2.push(4); stack2.push(2); Stack&lt;Integer&gt; result = merge(stack1, stack2); // Print the result stack System.out.println(&quot;Merged stack:&quot;); while (!result.isEmpty()) { System.out.println(result.pop()); } } } StackMerger.main(null); . Merged stack: 6 5 4 3 2 1 .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/03/26/merge.html",
            "relUrl": "/unit-work/2023/03/26/merge.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Generics Types and Collections",
            "content": "Add/Delete Elements from Queue . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } public class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; printQueue(); } } // add single object to queue public void add(T data) { this.queue.add(data); this.count++; printQueue(); } // delete objects from queue public T delete() { count--; return this.queue.delete(); } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } class QueueTester { public static void main(String[] args) { // create queue manager QueueManager&lt;Integer&gt; qm = new QueueManager&lt;&gt;(&quot;Queue&quot;); // add objects to queue qm.addList(new Integer[]{1, 2, 3, 4, 5}); // delete objects from queue while (qm.delete() != null) { qm.printQueue(); } } } QueueTester.main(null); . Queue count: 1 Queue data: 1 Queue count: 2 Queue data: 1 2 Queue count: 3 Queue data: 1 2 3 Queue count: 4 Queue data: 1 2 3 4 Queue count: 5 Queue data: 1 2 3 4 5 Queue count: 4 Queue data: 2 3 4 5 Queue count: 3 Queue data: 3 4 5 Queue count: 2 Queue data: 4 5 Queue count: 1 Queue data: 5 Queue count: 0 Queue data: . java.lang.NullPointerException: null at Queue.peek(#15:1) at Queue.delete(#15:1) at QueueManager.delete(#16:1) at QueueTester.main(#17:1) at .(#18:1) .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/03/26/generics.html",
            "relUrl": "/unit-work/2023/03/26/generics.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Tech Talk 1",
            "content": "Notes . A reference is a pointer that points to the memory location for primitive data | Wrapper class is Integer for an int and Double for a double and so on | . Binary Addition . import java.util.Scanner; public class BinaryAddition { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first binary number: &quot;); String binary1 = scanner.nextLine(); System.out.print(binary1 + &quot; n&quot;); System.out.print(&quot;Enter the second binary number: &quot;); String binary2 = scanner.nextLine(); System.out.print(binary2 + &quot; n&quot;); int decimal1=Integer.parseInt(binary1,2); int decimal2=Integer.parseInt(binary2,2); int sum = decimal1 + decimal2; System.out.println(Integer.toBinaryString(sum)); } } BinaryAddition.main(null); . Enter the first binary number: 1 Enter the second binary number: 1 10 . Overall Score . Corrections . Question | My Answer | Correct Answer | Explanation | . Question 23 | D | C | The values should all be the same but the order is the thing being altered by the program code. | . Question 26 | C | E | I forgot that the name variable does not get altered so it should just be remained as blackboard | . Code Problems . import java.lang.Math; import java.util.ArrayList; System.out.println(&quot;integer arary&quot;); int[] array = new int[5]; int total = 0; for (int i = 0; i &lt; array.length; i++) { array[i] = (int) (Math.random() * 10); System.out.println(&quot;Number at index &quot; + i + &quot; is &quot; + array[i]); total += array[i]; } System.out.println(&quot;The total is &quot; + total); System.out.println(&quot;doubles&quot;); double uno = Math.random() * 10; double dos = Math.random() * 10; double div = dos / uno; System.out.println(&quot;uno: &quot; + uno); System.out.println(&quot;dos: &quot; + dos); System.out.println(&quot;div: &quot; + div); System.out.println(&quot;Booleans&quot;); boolean bool = true; boolean bool2 = false; if (bool == bool2) { System.out.println(&quot;true&quot;); } else { System.out.println(&quot;false&quot;); } System.out.println(&quot;Characters&quot;); char char1 = &#39;a&#39;; char char2 = &#39;b&#39;; System.out.println(&quot;All the characters are &quot; + char1 + char2); System.out.println(&quot;Wrapper&quot;); Integer wrapper = new Integer(5); System.out.println(&quot;Wrapper of Integer: &quot; + wrapper); ArrayList&lt;Integer&gt; yo = new ArrayList&lt;&gt;(); for (int i : array){ yo.add(new Integer(i)); } System.out.println(&quot;arraylist yo: &quot; + yo.toString()); . integer arary Number at index 0 is 0 Number at index 1 is 3 Number at index 2 is 7 Number at index 3 is 3 Number at index 4 is 0 The total is 13 doubles uno: 8.668529178918881 dos: 8.381051085769043 div: 0.9668365777842728 Booleans false Characters All the characters are ab Wrapper Wrapper of Integer: 5 arraylist yo: [0, 3, 7, 3, 0] . Methods and Control Structures . Methods . A method is a block of code that performs a specific task. | Methods are used to contain a specific functionality of a program. | Methods can be called from other parts of a program to execute the code inside the method. (Similar to a function) | . Control Structures . Control structures are used to control the flow of a program. | Control structures are used to alter the flow of a program. | Control structures are used to make decisions in a program. | . Exploring Teacher Code . DiverseArray has methods and control structures. Each method have their own parameters and do diffrent logical operations to the parameters. This is the same with the Matrix class as well | DiverseArray and Matrix classes exclusively employ primitive types without any wrapper classes. Nevertheless, they do include 2D arrays for these primitives and a String[] which is a reference type. While the String[] is a reference type, the primitives are not. Similarly, the 2D arrays are reference types, but their elements are primitives. The primitives are stored within the 2D arrays, whereas the 2D arrays themselves are stored as elements within the reference type of the String[]. | DoNothingByValue is also a method but it just takes the primitive and does nothing to it. It does not alter the value of the primitive. It copies the primitive. | IntByReference takes the reference of the integer and is able to modify it. | . Exploring Menu . import java.util.HashMap; import java.util.Map; import java.util.Scanner; /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows public class Menu { // Format // Key {0, 1, 2, ...} created based on order of input menu // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); /** * Constructor for Menu, * * @param rows, is the row data for menu. */ public Menu(MenuRow[] rows) { int i = 0; for (MenuRow row : rows) { // Build HashMap for lookup convenience menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); } } /** * Get Row from Menu, * * @param i, HashMap key (k) * * @return MenuRow, the selected menu */ public MenuRow get(int i) { return menu.get(i); } /** * Iterate through and print rows in HashMap */ public void print() { for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { System.out.println(pair.getKey() + &quot; ==&gt; &quot; + pair.getValue().getTitle()); } } /** * To test run Driver */ public static void main(String[] args) { Driver.main(args); } } // The MenuRow Class has title and action for individual line item in menu public class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action public class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; DoNothingByValue.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; IntByReference.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; Matrix.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; Number.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } } . | | | /** | * Menu: custom implementation | * @author John Mortensen | * | * Uses String to contain Title for an Option | * Uses Runnable to store Class-Method to be run when Title is selected | */ | | // The Menu Class has a HashMap of Menu Rows | public class Menu { | // Format | // Key {0, 1, 2, ...} created based on order of input menu | // Value {MenuRow0, MenuRow1, MenuRow2,...} each corresponds to key | // MenuRow {&lt;Exit,Noop&gt;, Option1, Option2, ...} | Map&lt;Integer, MenuRow&gt; menu = new HashMap&lt;&gt;(); | | /** | * Constructor for Menu, | * | * @param rows, is the row data for menu. | */ | public Menu(MenuRow[] rows) { | int i = 0; | for (MenuRow row : rows) { | // Build HashMap for lookup convenience | menu.put(i++, new MenuRow(row.getTitle(), row.getAction())); | } | } | | /** | * Get Row from Menu, | * | * @param i, HashMap key (k) | * | * @return MenuRow, the selected menu | */ | public MenuRow get(int i) { | return menu.get(i); | } | | /** | * Iterate through and print rows in HashMap | */ | public void print() { | for (Map.Entry&lt;Integer, MenuRow&gt; pair : menu.entrySet()) { | System.out.println(pair.getKey() + &#34; ==&gt; &#34; + pair.getValue().getTitle()); | } | } | | /** | * To test run Driver | */ | public static void main(String[] args) { | Driver.main(args); | } | | } Unresolved dependencies: - class MenuRow - variable Driver . Exploring FRQ . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } private int hopDistance() { /* implementation not shown */ // Int datatype used because steps should be whole numbers return (int) (Math.random() * 20) - 10; } public boolean simulate() { int start = 0; int numOfHops = 0; // control structure to simulate frog hopping with constraints while(start &gt;= 0 &amp;&amp; numOfHops &lt; maxHops &amp;&amp; start &lt; goalDistance) { start += hopDistance(); numOfHops++; } return start &gt;= goalDistance; } public double runSimulations(int num) { int count = 0; for (int i = 0; i &lt; num; i++) { // control structure to count number of successful simulations if (this.simulate() == true) { count++; } } // Cast to double to get decimal value return (double) count / num; } public static void main(String[] args) { FrogSimulation test = new FrogSimulation(20, 5); System.out.println(test.simulate()); System.out.println(test.runSimulations(100)); } } FrogSimulation.main(null); . false 0.09 .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/03/06/TT1.html",
            "relUrl": "/unit-work/2023/03/06/TT1.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "AP Practice 52Q Exam Reflection",
            "content": "Overall Score . . Corrections . Question | My Answer | Correct Answer | Explanation | . Question 14 | B | C | The answer should have been C because in this type of for loop you need [] when iterating through a 2d array | . Question 15 | D | E | We need to check the index after because we alredy have the &#39;A&#39; accounted for | . Question 17 | E | D | The last element in the row had to have an a. So the answer had to be D | . Question 24 | D | C | The second one has to also be a &#39;b&#39;, so it can&#39;t be letter D. | . Question 26 | D | E | We want the reverse. The reverse of nono is onon, so it is wrong. It has to be D because reverse of noon is noon | . Question 58 | C | B | pos should be equal j because each iteration you don&#39;t want the index to be reset back to 0. | . Question 34 | C | B | We are traversing the array in row-major order so it would be 16 17 not 17 16. | . Question 43 | D | C | The end index was howFar not howFar + 1, so we can&#39;t include the p. So that is why C is right | . Question 49 | C | B | I added it incorrectly. This was a silly mistake. | . Question 52 | D | E | Row is being decremented not incremented so it can&#39;t be letter D. This one was pretty confusing for me | . Overall Reflection . Overall, I think I did worse on this quiz than last weeks. I rushed a little too much and did a few silly mistakes. I just need to work on more practice questions and get myself familiar to all different types of questions that can come up on the test. .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/01/30/52_Question_MC.html",
            "relUrl": "/unit-work/2023/01/30/52_Question_MC.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "AP Practice 66Q Exam Reflection",
            "content": "Overall Score . . Corrections . Question | My Answer | Correct Answer | Explanation | . Question 16 | B | C | The answer should have been C because I need to iterate the actual array and not the column. | . Question 19 | B | A | It has to c &lt; d for it to work. If c is greater than or equal to then this statement wouldn&#39;t be equivalent to the one given. | . Question 23 | C | B | No need to subtract the length by -1 because we have a &lt;= in the for loop logic. | . Question 35 | B | D | Can&#39;t be B because the first value has to be 0 as it is 0 in the given code segment. | . Question 43 | C | D | Implementation 1 will not work because in the for loop logic there needs to be a -1 in the arr.length to go to the maximum trials for the loop. | . Question 58 | C | B | pos should be equal j because each iteration you don&#39;t want the index to be reset back to 0. | . Question 64 | D | B | It can only be III because in I it has arr[i] but in an enhanced loop you are already given the value not the index. | . Question 66 | E | B | This is a silly mistake. It is obvious that it has to be less than 10 as the for loop was also less than 0 and all the values printed in the given segment are less than 10. | . Overall Reflection . Overall, I think I did pretty well on this quiz. There were a lot of De Morgan’s law questions, which took some time as you have to look at each answer choice to find the correct one. I was able to understand most of the conceptual ones. I do need to work on substring and indexOf as I got stuck on some but was still able to find the correct answer. I need to stop overlooking the question and not try to go as fast as possible. .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2023/01/22/66_Question_MC.html",
            "relUrl": "/unit-work/2023/01/22/66_Question_MC.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit8grading",
            "content": "Student Grade Complete Correct Organization . Rebecca Su | 1/1 | 1/1 | 1/1 | 1/1 -Very Neat and organized | . Daniel Tsivkovski | 1/1 | 1/1 | 1/1 | 1/1 - Great Notes and Homework solution | . Rohan Gaikwad | 1.1/1 | 1/1 | 1/1 | 1/1 - Extra credit and homework, and kahot ec | . Meena Annamalai | .9/1 | 1/1 | 1/1 | .9/1 - Everything looks great but more organized notes would be nice touch | . Nicholas Ramos | 1/1 | 1/1 | 1/1 | .9/1 - Added extra credit for 1/1 | . Don Tran | .95/1 | 1/1 | 1/1 | .9/1 | . Natalie Beckwith | .9/1 | 1/1 | 1/1 | 1/1 Complete | . Ellie Rozenkrantz | .9/1 | 1/1 | 1/1 | 0/9/1 Complete, link to fastpages doesn’t work | . Allie Xiao | .9/1 | 1/1 | 1/1 | 1/1Complete | . Nathan Manangan | 0.95/1 | 1/1 | 1/1 | 1/1 has notes | . Dylan Luo | 1/1 | 1/1 | 1/1 | 1/1 has notes and is really organized | . Shreya Ahuja | 1/1 | 1/1 | 1/1 | 1/1 has notes, is really organized, and did extra credit | . Madhumita Narayan | .85/1 | .9/1 not all hacks done | 1/1 | 1/1 | . Samaya Sankuratri | .95/1 | 1/1 | 1/1 | 1/1 notes and really organized | . Alice Tang | 0.95/1 | 1/1 | 1/1 | 1/1 notes and hw complete | . Saumya Palakodety | .9/1 | 1/1 | 1/1 | 1/1 hw complete | . Akhil Nandhakumar | 1/1 | 1/1 | 1/1 | 1/1 organized and extra cred done | . Yash Shah | 1/1 | 1/1 | 1/1 | 1/1 organzied, hw done, and extra cred complete | . Aiden Wu | 1/1 | 1/1 | 1/1 | 1/1 hw done and extra cred complete | . Jazair Tallman | 1.1/1 | 1/1 | 1/1 | 1/1 hw done, extra cred done, and kahoot extra cred | . Jun Lim | 1/1 | 1/1 | 1/1 | 1/1 notes, hw and ec done | . Aryan Shah | 0.9/1 | 1/1 | 1/1 | 1/1 hw completed | . Pranavi Inukurti | 0.9/1 | 1/1 | 1/1 | 1/1 hw completed | . Aadya Daita | 1/1 | 1/1 | 1/1 | 1/1 hw and ec done | . Rohan Malipeddi | 1/1 | 1/1 | 1/1 | 1/1 hw done and added own ec | . Sarayu Pochimireddy | 0.9/1 | 1/1 | 1/1 | 1/1 hw done | . Krish Patil | .95/1 | 1/1 | 1/1 | 1/1 - HW done and everything looks good | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/2022/12/14/Unit8Grading.html",
            "relUrl": "/2022/12/14/Unit8Grading.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Tech Business Panel Notes",
            "content": "Kathyleen Beveridge . BS in Finance from Santa Clara University | Masters in Business Administration from USC | First started career as a stock broker at Wells Fargo but pivoted and joined tech at HP | All of her companies has one common mission, which is to push technology in the way of living and life | She is now the Senior Director of Marketing at ThermoFisher | She isn’t very invested into the technology side but works very close with software engineers and data scientists | Emphasizes the use of scrum master in the workplace | . Kris Porter . Software Developer, DevOps Engineer, and Infrastructure Engineer | Did schooling similar to us, such as many AP classes but no CS classes were offered at his school | First CS class did not go as well and had to retake | UnderGrad in EE from UCLA and Masters in EE from CSU LA | Graduated college right when the 2008 recession happened so not many jobs were available | Worked at companies like NBC Universal, Qualcomm, and Twitter. | Now is working Mysten Labs, which is a Web 3 company that is researching blockchain technolgy and Crypto with decentralized systems | . Reflection . Overall, I enjoyed the panel today and was able to learn a lot about marketing/management and also software development. It was very helpful and cool to learn two different careers and perspectives in the tech industry. It is reassuring that you don’t have to go to college for CS and you can always pivot yourself into the tech industry. I was very interested in Kathyleen Beverridge’s work because she talked about how she doesn’t exactly code but helps manage and market products. This is something I would like to do in the future as I like to code but I also would like to lead a project and help launch a product onto the market. She also talked a lot about communication and how communication is skill that needs to be learned and can be very helpful in the workplace. Kris Porter talked a lot about the technical skills he picked up over the years and also focused on the idea of constantly learning. He emphasized the point that you need to constantly learn new things in the tech industry because technology is changing everyday. I really liked the different fields he worked on and how he was able to take skills from each company and use it in his next company. He also touched on the topic but knowing when to leave and pivot. I liked his new job in Web 3 as it is something that I am interested in and would like to try and learn more about it as it is a new field that is getting a lot of new breakthroughs. .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/12/13/buspanel.html",
            "relUrl": "/unit-work/2022/12/13/buspanel.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "FRQ 4",
            "content": "public LightBoard(int numRows, int numCols) { lights = new Boolean[numRows][numCols]; for (int i =0; i &lt; numRows; i++) { for (int j =0; j &lt; numCols; j++) { if(Math.random() &lt;= 0.4) { lights[i][j] = true; } } } } . | public LightBoard(int numRows, int numCols) { &#39;.class&#39; expected . public Boolean evaluateLight(int row, int col) { int count = 0; if (lights[row][col] == true) { for (int i =0; i &lt; lights.length; i++) { if (lights[i][col] == true) { count++; } } if (count % 2 == 1) { return true; } else { return false; } } else if (lights[row][col] == false) { int count = 0; for (int i = 0; i&lt; lights.length; i++) { if (lights[i][col] == true) { count++; } } if (count % 3 == 0) { return true; } else { return false; } } } . import java.lang.Math; public class LightBoard { private boolean[][] lights; public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int i =0; i &lt; numRows; i++) { for (int j =0; j &lt; numCols; j++) { if(Math.random() &lt;= 0.4) { lights[i][j] = true; } } } } public boolean evaluateLight(int row, int col) { if (lights[row][col] == true) { int counter = 0; for (int i = 0; i &lt; lights.length; i++){ if (lights[i][col] == true){ counter++; } } if (counter % 2 == 0){ return false; } else{ return true; } } else { int counter = 0; for (int i = 0; i &lt; lights.length; i++){ if (lights[i][col] == true){ counter++; } } if (counter % 3 == 0) { return true; } else { return false; } } } } LightBoard a = new LightBoard(5,5); System.out.println(a.evaluateLight(0,0)); System.out.println(a.evaluateLight(0,2)); System.out.println(a.evaluateLight(0,3)); . false false true .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/12/12/frq4.html",
            "relUrl": "/unit-work/2022/12/12/frq4.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Trimester 1 Quiz + Reflection",
            "content": "Overall Score . . Corrections . Question | My Answer | Correct Answer | Explanation | . Question 3 | C | B | This was a silly mistake. I misclicked C but I knew the answer was B. It has to be public to allow other classes to access the value. | . Question 18 | C | B | The one is not needed because the indices are from 0 to myList.size() - 1. | . Question 23 | D | B | I was right on the first part of the array with bear but then the next one has to be baboon because of the animals.remove(k) at the end of the animals.add() | . Question 25 | B | D | Choice I should also be included because in choice I you get height, width, and the depth of the box by using the get methods for each of those. This gives the ability to compare the dimensions to see if the box fits or not. | . Question 31 | B | C | I forgot that the value is being updated so that new value needs to be used in the next iteration of the for loop instead of the old value. | . Question 34 | C | B | Choice III cant be the answer because it does not use the parameter Point constructure to center a new Point with x and y. It tries to update x and y but it cant because they are private variables | . N@TM Photos . . Overall Reflection . Overall, this trimester provided a wealth of learning opportunities. PBL allowed me to utilize technologies and skills that I probably wouldn’t have used before. Also, we were able to address most of the 10 CSA units for the College Board and other basic Java/OOP related subjects. One thing I had never used was springboot and java mostly. This trimester allowed me to tinker with it and gain new skills that will help me in trimester 2. . Java Springboot . Java springboot being a high learning curve I still was able to enjoy the learning process. From PBL and the use of Java springboot I finally understood how many companies use a frontend and backend. The usually request the external API in the backend and get the JSON and then in the frontend they call their own api url to get that data. This allows them to control what data is actually being shown to the user. I really liked this idea and hopefully in trimester two I can add authentication so only my frontend can access this data and not some other external user. . AWS . AWS is something I have been pretty good at. This trimester I was able to play with docker-compose and docker containers and containerize my java project. This allowed me to understand how java projects get compiled and deployed. .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/11/08/trimester1.html",
            "relUrl": "/unit-work/2022/11/08/trimester1.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Jokes Frontend",
            "content": "Joke HaHa Boohoo .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/10/10/PBL-Jokes.html",
            "relUrl": "/unit-work/2022/10/10/PBL-Jokes.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Week 7 ArrayList",
            "content": "Hacks . Arraylist . | Deployed two websites on one machine. Two more deploying currently . csa.aadit.dev | dontntntnt.de | . | Java JPA POJO . Get All jokes | . | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/10/09/week7.html",
            "relUrl": "/unit-work/2022/10/09/week7.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Arraylists",
            "content": "import java.util.ArrayList; import java.util.Comparator; public class ArrayListProgram { public static void main(String[] args) { // Creating 2 arraylists ArrayList&lt;String&gt; basketballPlayers = new ArrayList&lt;String&gt;(); // ArrayList&lt;String&gt; footballPlayers = new ArrayList&lt;String&gt;(); // Adding without index basketballPlayers.add(&quot;LeBron James&quot;); basketballPlayers.add(&quot;Stephen Curry&quot;); System.out.println(&quot;Basketball Players are&quot; + &quot; n&quot; + basketballPlayers + &quot; n&quot;); // Adding players with index basketballPlayers.add(0, &quot;Kobe Bryant&quot;); basketballPlayers.add(2, &quot;Carmelo Anthony&quot;); System.out.println(&quot;Kobe at index 0, and Carmelo at index 2:&quot; + &quot; n&quot; + basketballPlayers + &quot; n&quot;); // Showing size of list System.out.println(&quot;Size of basketball players list:&quot; + &quot; n&quot; + basketballPlayers.size() + &quot; n&quot;); // Remove item with index basketballPlayers.remove(3); System.out.println(&quot;remove() at index 3:&quot; + &quot; n&quot; + basketballPlayers + &quot; n&quot;); // Remove an item basketballPlayers.remove(&quot;Kobe Bryant&quot;); System.out.println(&quot;remove() Kobe:&quot; + &quot; n&quot; + basketballPlayers + &quot; n&quot;); basketballPlayers.add(&quot;Kobe Bryant&quot;); // get an iteam with index System.out.println(&quot;Get element at index 2:&quot; + &quot; n&quot; + basketballPlayers.get(2) + &quot; n&quot;); // find index of an item System.out.println(&quot;indexOf Kobe:&quot; + &quot; n&quot; + basketballPlayers.indexOf(&quot;Kobe Bryant&quot;) + &quot; n&quot;); // hashcode of list System.out.println(&quot;Hash Code: &quot; + basketballPlayers.hashCode() + &quot; n&quot;); // check if list is empty System.out.println(&quot;Is the arraylist empty: &quot; + basketballPlayers.isEmpty() + &quot; n&quot;); // check if list contains an item System.out.println(&quot;Does arraylist contain Kobe Bryant: &quot; + basketballPlayers.contains(&quot;Kobe Bryant&quot;) + &quot; n&quot;); // clears list basketballPlayers.clear(); System.out.println(&quot;Cleared basketball Players:&quot; + &quot; n&quot; + basketballPlayers); } } ArrayListProgram.main(null); . Basketball Players are [LeBron James, Stephen Curry] Kobe at index 0, and Carmelo at index 2: [Kobe Bryant, LeBron James, Carmelo Anthony, Stephen Curry] Size of basketball players list: 4 remove() at index 3: [Kobe Bryant, LeBron James, Carmelo Anthony] remove() Kobe: [LeBron James, Carmelo Anthony] Get element at index 2: Kobe Bryant indexOf Kobe: 2 Hash Code: -831701382 Is the arraylist empty: false Does arraylist contain Kobe Bryant: true Cleared basketball Players: [] .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/10/09/arraylist.html",
            "relUrl": "/unit-work/2022/10/09/arraylist.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Week 6 Project Approval",
            "content": "Hacks . Images . | Deployed two websites on one machine . csa.aadit.dev | dontntntnt.de | . | API . JavaScript API | Java SpringbootAPI | . | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/10/02/week6.html",
            "relUrl": "/unit-work/2022/10/02/week6.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Arrays and Images",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;../images/&quot;; // location of images private final String outDir = &quot;../images/tmp/&quot;; // location of created files private final String blueDir = &quot;../images/tmp/blue/&quot;; private String inFile; private String asciiFile; private String blueFile; private String resizedFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; // this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; // this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; // this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void bluescale() { BufferedImage img = null; BufferedImage imgBlue = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data imgBlue = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); // get RGB values int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; // create a new color with the same RGB values but adjusted Color newColor = new Color(0, 0, total); imgBlue.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(imgBlue), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // convert every pixel to an ascii character (ratio does not seem correct) // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt // tester/driver public static void main(String[] args) throws IOException { Pics logo = new Pics(&quot;logo&quot;, &quot;png&quot;); logo.bluescale(); logo.convertToAscii(); } } Pics.main(null); .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/10/01/image.html",
            "relUrl": "/unit-work/2022/10/01/image.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Week 5 Design Starters",
            "content": "Hacks . Fibonacci . | Deployed two websites on one machine csa.aadit.dev | adispringcsa.tk | Still working on AWS Calculator | . | NBA Teams for JS Learning Code | . | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/25/week5.html",
            "relUrl": "/unit-work/2022/09/25/week5.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Fibonacci List",
            "content": "Fibonacci For Loop . import javax.swing.JOptionPane; public class FiboFor { public static void main(String[] args) { String inpStr = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int inpNum = Integer.parseInt(inpStr); int first = 0; int second = 1; for (int i = 1; i &lt;= inpNum; i++) { System.out.print(first + &quot; &quot;); int nextNum = first + second; first = second; second = nextNum; } } } FiboFor.main(null); . 0 1 1 2 3 5 8 13 21 34 . Fibonacci While Loop . import javax.swing.JOptionPane; public class FiboWhile { public static void main(String[] args) { int start = 0; String inpStr = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int inpNum = Integer.parseInt(inpStr); int first = 0; int second = 1; while (start &lt; inpNum) { System.out.print(first + &quot; &quot;); int nextNum = first + second; first = second; second = nextNum; start++; } } } FiboWhile.main(null); . 0 1 1 2 3 5 8 13 21 34 . Fibonacci Recursion Loop . import javax.swing.JOptionPane; public class FiboRec{ public static int Recursion(int n){ if(n == 0){ return 0; } if(n == 1 || n == 2){ return 1; } return Recursion(n-2) + Recursion(n-1); } public static void main(String args[]) { String num = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int end = Integer.parseInt(num); for(int i = 0; i &lt; end; i++){ System.out.print(Recursion(i) +&quot; &quot;); } } } FiboRec.main(null); . 0 1 1 2 3 5 8 13 21 34 . Fibonacci Abstraction . abstract class Fibonacci { abstract void run(); private int first; private int second; public void setFirst(int num) { first = num; } public int getFirst() { return first; } public void setSecond(int num) { second = num; } public int getSecond() { return second; } } class Fibo extends Fibonacci { void run() { String inpStr = JOptionPane.showInputDialog(&quot;Give the amount of Fibo numbers that you would like to print&quot;); int inpNum = Integer.parseInt(inpStr); setFirst(0); setSecond(1); for (int i = 1; i &lt;= inpNum; i++) { System.out.print(getFirst() + &quot; &quot;); int nextNum = getFirst() + getSecond(); setFirst(getSecond()); setSecond(nextNum); } } public static void main(String args[]) { Fibonacci obj = new Fibo(); obj.run(); } } Fibo.main(null); . 0 1 1 2 3 5 8 13 21 34 .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/24/fibo.html",
            "relUrl": "/unit-work/2022/09/24/fibo.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 4 FRQ No. 1",
            "content": "Hacks . 2D Arrays . | Deployed two websites on one machine csa.aadit.dev | adispringcsa.tk | Working on AWS Scheduler to stop instance for certain hours | . | FRQ Question #1 | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/18/week4.html",
            "relUrl": "/unit-work/2022/09/18/week4.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Question 1 FRQ",
            "content": "2018 FRQ #1 . Simulate a frog attempting to reach the goal as described in part (a) | . public boolean simulate() { int start = 0; int numOfHops = 0; while(start &gt;= 0 &amp;&amp; numOfHops &lt; maxHops &amp;&amp; start &lt; goalDistance) { start += hopDistance(); numOfHops++; } return start &gt;= goalDistance; } . Run num simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal | . public double runSimulations(int num) { int count = 0; for (int i = 0; i &lt; num; i++) { if (simulate() == true) { count++; } } return double (count) / num; } . 2019 FRQ #1 . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive | . public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int i = year1; i &lt; year2 +1; i++) { if(isLeapYear(i)) { count++; } } return count; } . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year) | . public static int dayOfWeek(int month, int day, int year) { int firstDay = firstDayOfYear(year); int day = dayOfYear(month, day, year); return (firstDay + day - 1) % 7; } . 2015 FRQ #1 . Complete method arraySum below. | . public static int arraySum(int[] arr) { int sum = 0; for (int i =0; i &lt; arr.length; i++) { sum += arr[i]; } return sum; } . Write a static method rowSums that calculates the sums of each of the rows in a given two-dimensional array and returns these sums in a one dimensional array | . public static int[] rowSums(int[][] arr2D) { int[] arr; for (int i =0; i &lt; arr2D.length; i++) { arr[i] = arraySum(arr2D[i]); } return arr; } . Initialize array with number of rows in arr2D, so int[] arr = new int[arr2D.length]; | . public static boolean isDiverse(int[][] arr2D) { int[] arr = rowSums(arr2D); // Couldn&#39;t figure out rest } . // Answer public static boolean isDiverse( int[][] arr2D ) { // gets sums of each row from method created in part b int[] check = rowSums(arr2D); // Creates two loops to check position 0 and 1 and so on for (int i=0; i&lt;check.length; i++) { for (int j=i+1; j&lt;check.length; j++) { if (check[i] == check[j]) return false; } } return true; } .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/18/frq1.html",
            "relUrl": "/unit-work/2022/09/18/frq1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "2D Array",
            "content": "import java.util.*; public class Array { String[][] monkeys = { { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, }; public void printMonkeys () { for (int count = 4; count &gt;= 1; count--) { System.out.println(&quot;Here comes &quot; + count + &quot; monkeys n&quot;); for (int i = 0; i&lt;monkeys[0].length; i++) { for (int j = 0; j&lt;count; j++) { System.out.print(monkeys[j][i] + &quot; &quot;); } System.out.println(); } System.out.println(); System.out.println(&quot;Now there are &quot; + (count-1) + &quot; monkeys n&quot;); } } } Array myRhyme = new Array(); myRhyme.printMonkeys(); . Here comes 4 monkeys ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ Now there are 3 monkeys Here comes 3 monkeys ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 Now there are 2 monkeys Here comes 2 monkeys ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ Now there are 1 monkeys Here comes 1 monkeys ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Now there are 0 monkeys .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/16/2Darray.html",
            "relUrl": "/unit-work/2022/09/16/2Darray.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Week 3 Backend Development",
            "content": "Hacks . If and Else Statements Notebook . | Deployed Website Edits on Deployment Guide | . | Focus and Habits | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/10/week3.html",
            "relUrl": "/unit-work/2022/09/10/week3.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Self Reflection",
            "content": "Gratitude . I am grateful for the community that I live in | I am grateful for the friends that I have | I am grateful for the opportunities that I have access to | . Reflections from Yale video . Helping others will make you happy | Everyone has the ability to change their well being | Better physical health can help imporve mental health | Remember to focus on what you have in your hands | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/10/self.html",
            "relUrl": "/unit-work/2022/09/10/self.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "If and Else Statements",
            "content": "What is if and else condition . Allows program to check if a condition is true and runs that certain code block otherwise it will run the other code block | . if(condition) { // code block for if condition is true } else { // code block for if condition is not true } . If and Else if condition . If the first condition is not true you can use a else if to see if that condition is true | . if (condition) { // code block 1 for if condition is true } else if(condition2) { // checks if condition 2 is true and runs this code block } . Last if/else statement . Checks two conditions and if neither are True then results to last code block with no condition | . if (condition) { // code block 1 } else if (condition2) { // code block 2 } else { // last code block where neither condition or condition2 are true } . import java.util.Scanner; public class ConditionStatements { public void go() { Scanner scan = new Scanner(System.in); int num = scan.nextInt(); if (num == 1) { System.out.println(&quot;Number 1 was selected&quot;); } else if (num == 2) { System.out.println(&quot;Number 2 was selected&quot;); } else if (num ==3) { System.out.println(&quot;Number 3 was selected&quot;); } else if (num ==4) { System.out.println(&quot;Number 4 was selected&quot;); } else if (num ==5) { System.out.println(&quot;Number 5 was selected&quot;); } else { System.out.println(&quot;Number was not 1-5&quot;); } } public static void main(String[] args) { ConditionStatements cond = new ConditionStatements(); cond.go(); } } ConditionStatements.main(null); . Number 2 was selected . Switch Statement . Similar to if and else statement but in a neater way in my opinion | . import java.util.Scanner; public class SwitchStatement { public void go() { Scanner scan = new Scanner(System.in); int num = scan.nextInt(); switch (num){ case 1: System.out.println(&quot;Number 1 was selected&quot;); break; case 2: System.out.println(&quot;Number 2 was selected&quot;); break; case 3: System.out.println(&quot;Number 3 was selected&quot;); break; case 4: System.out.println(&quot;Number 4 was selected&quot;); break; case 5: System.out.println(&quot;Number 5 was selected&quot;); break; default: System.out.println(&quot;Number was not 1-5&quot;); } } public static void main(String[] args) { SwitchStatement cond = new SwitchStatement(); cond.go(); } } SwitchStatement.main(null); . Number 2 was selected . De Morgan&#39;s law . Similar to Logic Gates from CSP | Talks about how || (or) and &amp;&amp; (and) | . if (!((true == true) &amp;&amp; (true == false))) { System.out.println(&quot;De Morgans law is true&quot;); } . De Morgans law is true .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/10/ifandelse.html",
            "relUrl": "/unit-work/2022/09/10/ifandelse.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Week 2 Innovation -- Using Objects",
            "content": "Hacks . Part 1 Fastpages . Code.org Learning . | Playing around with Java Gui . | . Other Work . Anatomy of Java | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/03/week2.html",
            "relUrl": "/unit-work/2022/09/03/week2.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "GUI Notebook",
            "content": "import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JLabel; import javax.swing.JButton; import javax.swing.JTextField; import java.awt.*; import java.awt.event.*; import java.util.Random; import javax.swing.JOptionPane; public class Gui implements ActionListener { JFrame frame = new JFrame(); JPanel panel = new JPanel(); JButton submitButton = new JButton(&quot;Submit&quot;); JTextField fieldString = new JTextField(20); JLabel label = new JLabel(); int numGuesses = 1; boolean numCorrect = false; Random rand = new Random(); int randomNumber = rand.nextInt(100); void go() { frame.add(panel); panel.add(fieldString); panel.add(submitButton); panel.add(label); frame.setVisible(true); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); submitButton.addActionListener(this); frame.setSize(new Dimension(500, 500)); label.setText(&quot;Enter a number between 1 and 100&quot;); } public static void main(String[] args) { Gui gui = new Gui(); gui.go(); } @Override public void actionPerformed(ActionEvent e) { int field = Integer.parseInt(fieldString.getText()); System.out.println(randomNumber); System.out.println(field); if (numCorrect == false) { if (field &gt; randomNumber) { JOptionPane.showMessageDialog(null, &quot;Guess too high, try again. Amount of Guesses: &quot; + numGuesses); numGuesses += 1; fieldString.setText(&quot;&quot;); } else if (field &lt; randomNumber) { JOptionPane.showMessageDialog(null, &quot;Guess too low, try again. Amount of Guesses: &quot; + numGuesses); numGuesses += 1; fieldString.setText(&quot;&quot;); } else if (field == randomNumber) { JOptionPane.showMessageDialog(null, &quot;Correct Guess. Amount of Guesses: &quot; + numGuesses); numCorrect = true; System.exit(0); } } } } Gui.main(null); . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/09/02/gui.html",
            "relUrl": "/unit-work/2022/09/02/gui.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Alumini Panel Notes",
            "content": "Presenters . Colin, Avo, Andrew, Mabel, Allison, and Nitya Date Presented: 08/29/2022 . Challenges with Computer Science classes . The class will always be tough so don’t give up | Follow your own path. Don’t look at what other people are doing and just focus on your own journey. | Don’t cut corners and only do half the work. Be motivated and finish all the work | Fighting against egos. CS people have egos and just avoid them | Go step by step. Learn the basics first and then gradually move on. | . Why did you take AP CSA . CS can be applied anywhere | Knew some coding before so thought it would be an easy class | Helped see that programming is a skill that many people don’t have | . What are some internships or jobs you can do? . Coda Ninjas | Internships at tech companies i.e Northrop Grumman | Join clubs | NETWORK: Talk to people and put yourself out there | TA’s or tutoring students | . Overall Thoughts and Reflection . Overall, I think the presentation from the alumini was great and very informative. I was able to learn that computer science can be appplied anywhere. Right now many students have the image in their brains of the typical 9 to 5 job, where a CS person is just coding all day. From the panel I was able to learn that CS can be applied in different fields, such as Psychology, Machine Learning, or web design. I was also able to learn from today’s presentation that CS can be a struggle but you have to push through it. Everyone has their own path and journey and it is up to you if you want to look at other people or only focus on yourself. Also, you don’t need to know everything in the CS field. Companies won’t expect that from you but instead care about your problem solving abilities and if you are able to create a solution and then utilize those 2-3 months to create a final program or solution. This was pretty insightful as it allowed me to understand that understanding the big picture of problem is a lot more valuable. Lastly, the panel talked about how to land internships and jobs. Code Ninjas and tech companies are great places to look for. The only way is to just apply and put yourself out there through networking. All in all, to be successfull in computer science you need to persevere and put yourself in uncomfortable positions. .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/markdown/2022/08/29/alumini.html",
            "relUrl": "/markdown/2022/08/29/alumini.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Week 1 Innovation -- Primitives",
            "content": "Hacks . Part 1 Fastpages . Primitives Learning | FastPages Hacks | Code.org Learning . | Bash Hacks | . Other Work . Anatomy of Java | .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/08/28/week1.html",
            "relUrl": "/unit-work/2022/08/28/week1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Anatomy of Java",
            "content": "Basic Java Class . // Main Class. Name of class needs to be the same as filename public class Hello { // The main method. First thing program does is find this method and run it public static void main(String[] args) { System.out.println(&quot;Hello&quot;); } } Hello.main(null); // Calls main method with passing nothing for parameter . Hello . Methods . public class Sports { // Method called sportIntro. Similar to functions in python static void sportIntro() { System.out.println(&quot;I love sports&quot;); } public static void main(String[] args) { // calls method/function sportIntro(); } } Sports.main(null); . I love sports . Class Attributes with Objects . public class Sports { // attributes of the class Sports String name; double population; public static void main(String[] args) { // Creating new object called basketball Sports basketball = new Sports(); // setting attributes for the object basketball basketball.name = &quot;Basketball&quot;; basketball.population = 24.23; // in millions System.out.println(&quot;For the game of &quot; + basketball.name + &quot;, &quot; + basketball.population + &quot; million people play!&quot;); } } Sports.main(null); . For the game of Basketball, 24.23 million people play! . Constructors . public class Sports { String name; // constructor for the class Sports. Needs to be same name as class public Sports(String title) { name = title; } public static void main(String[] args) { Sports basketball = new Sports(&quot;Basketball is the best sport&quot;); System.out.println(basketball.name); } } Sports.main(null); . Basketball is the best sport . Getters and Setters . Private Variables | . public class Sports { // can only be changed with a setter private String title; // returns private variable information public String getTitle() { return title; } // only thing that can change the private variable title public void setTitle(String title) { this.title = title; } } public class Main { public static void main(String[] args) { Sports basketball = new Sports(); basketball.setTitle(&quot;basketball&quot;); System.out.println(basketball.getTitle()); } } Main.main(null); . basketball . Dessert Example . public class Desserts { // setting class attributes that can only be accessed with setter/getter private String name; private int price; // intiailize variables in constructor public Desserts() { name = &quot;dessert&quot;; price = 5; } // setter method public void setDesc(String name, int price) { System.out.println(&quot;In Setter&quot;); this.name = name; this.price = price; } // getter method public String getDesc() { return &quot;The name of the dessert is &quot; + this.name + &quot; and the price is $&quot; + this.price; } public static void main(String[] args) { Desserts Dessert1 = new Desserts(); Dessert1.setDesc(&quot;Cake&quot;, 10); System.out.println(Dessert1.getDesc()); } } Desserts.main(null); . In Setter The name of the dessert is Cake and the price is $10 .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/08/28/anatomy.html",
            "relUrl": "/unit-work/2022/08/28/anatomy.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Bash Post",
            "content": "!export project_dir = ~/Desktop/Work/CSA/fastpages-CSA . /usr/bin/sh: 1: export: : bad variable name . !ls . 2020-02-20-test.ipynb 2022-08-23-primitives.ipynb ghtop_images 2022-08-17-java.ipynb 2022-08-25-bash.ipynb my_icons 2022-08-17-python.ipynb README.md . !echo &quot;Change directory into project and print working directory&quot; !cd $project !pwd !echo &quot;List all files in fastpages repo&quot; !cd $project_dir !ls !echo &quot;list with more information&quot; !ls -al . Change directory into project and print working directory /mnt/c/Users/Aadit.JEDILORD/Desktop/Work/CSA/fastpages-CSA/_notebooks List all files in fastpages repo 2020-02-20-test.ipynb 2022-08-23-primitives.ipynb ghtop_images 2022-08-17-java.ipynb 2022-08-25-bash.ipynb my_icons 2022-08-17-python.ipynb README.md list with more information total 3116 drwxrwxrwx 1 aadit aadit 512 Aug 28 00:09 . drwxrwxrwx 1 aadit aadit 512 Aug 25 08:37 .. -rwxrwxrwx 1 aadit aadit 3162468 Aug 17 21:54 2020-02-20-test.ipynb -rwxrwxrwx 1 aadit aadit 1225 Aug 21 21:29 2022-08-17-java.ipynb -rwxrwxrwx 1 aadit aadit 1114 Aug 17 21:54 2022-08-17-python.ipynb -rwxrwxrwx 1 aadit aadit 3242 Aug 25 09:13 2022-08-23-primitives.ipynb -rwxrwxrwx 1 aadit aadit 4763 Aug 28 00:15 2022-08-25-bash.ipynb -rwxrwxrwx 1 aadit aadit 771 Aug 17 21:54 README.md drwxrwxrwx 1 aadit aadit 512 Aug 17 21:54 ghtop_images drwxrwxrwx 1 aadit aadit 512 Aug 17 21:54 my_icons . echo &quot;What package do you want to find&quot; read package dpkg -l | grep $package # This program asks for package and returns the package name with description . conda list and conda info can help verify Anaconda installation and list conda packages installed . !conda list . # packages in environment at /home/aadit/anaconda3: # # Name Version Build Channel _anaconda_depends 2019.10 py37_0 _ipyw_jlab_nb_ext_conf 0.1.0 py37_0 _libgcc_mutex 0.1 main _r-mutex 1.0.0 anacondar_1 _tflow_select 2.3.0 mkl absl-py 0.9.0 py37_0 agate 1.6.1 py37_2 agate-dbf 0.2.1 py_0 agate-excel 0.2.3 py_0 agate-sql 0.5.4 py_0 alabaster 0.7.12 py37_0 anaconda custom py37_1 anaconda-client 1.7.2 py37_0 anaconda-navigator 1.9.7 py37_0 anaconda-project 0.8.2 py37_0 appdirs 1.4.4 pyh9f0ad1d_0 conda-forge apscheduler 3.6.3 py37_1 asgiref 3.2.7 py_0 asn1crypto 0.24.0 py37_0 astor 0.7.1 py_0 conda-forge astroid 2.2.5 py37_0 astropy 3.1.2 py37h7b6447c_0 atomicwrites 1.3.0 py37_1 attrs 19.1.0 py37_1 babel 2.6.0 py37_0 backcall 0.1.0 py37_0 backports 1.0 py37_1 backports.os 0.1.1 py37_0 backports.shutil_get_terminal_size 1.0.0 py37_2 bash-kernel 0.7.2 pypi_0 pypi beautifulsoup4 4.9.0 py37_0 binutils_impl_linux-64 2.33.1 he6710b0_7 binutils_linux-64 2.33.1 h9595d00_15 bitarray 0.8.3 py37h14c3975_0 bkcharts 0.2 py37_0 blas 1.0 mkl bleach 3.1.0 py37_0 blosc 1.15.0 hd408876_0 bokeh 1.0.4 py37_0 boto 2.49.0 py37_0 bottleneck 1.2.1 py37h035aef0_1 brotlipy 0.7.0 py37h8f50634_1000 conda-forge bs4 4.9.0 0 bwidget 1.9.11 1 bzip2 1.0.6 h14c3975_5 c-ares 1.15.0 h7b6447c_1001 ca-certificates 2022.07.19 h06a4308_0 cairo 1.16.0 h18b612c_1001 conda-forge certifi 2022.6.15 py37h06a4308_0 cffi 1.12.2 py37h2e261b9_1 cfgv 3.3.0 pyhd8ed1ab_0 conda-forge chardet 3.0.4 py37_1003 click 7.1.2 py_0 cloudpickle 0.8.0 py37_0 clyent 1.2.2 py37_1 colorama 0.4.1 py37_0 conda 4.12.0 py37h06a4308_0 conda-build 3.17.8 py37_0 conda-env 2.6.0 1 conda-package-handling 1.6.1 py37h7b6447c_0 conda-verify 3.1.1 py37_0 configparser 5.0.2 pyhd8ed1ab_0 conda-forge contextlib2 0.5.5 py37_0 cryptography 2.6.1 py37h1ba5d50_0 csvkit 1.0.4 py37_0 curl 7.68.0 hf8cf82a_0 conda-forge cycler 0.10.0 py37_0 cython 0.29.7 py37he6710b0_0 cytoolz 0.9.0.1 py37h14c3975_1 dash 1.0.0 py_0 conda-forge dash-core-components 1.0.0 py_0 conda-forge dash-html-components 1.0.0 py_0 conda-forge dash-renderer 1.0.0 py_0 conda-forge dash-table 4.0.0 py_0 conda-forge dask 1.1.4 py37_1 dask-core 1.1.4 py37_1 dbfread 2.0.7 py37_0 dbus 1.13.6 h746ee38_0 decorator 4.4.0 py37_1 defusedxml 0.5.0 py37_1 distlib 0.3.2 pyhd8ed1ab_0 conda-forge distributed 1.26.0 py37_1 django 3.0.3 py_0 docutils 0.14 py37_0 editdistance 0.5.3 py37h3340039_2 conda-forge entrypoints 0.3 py37_0 et_xmlfile 1.0.1 py37_0 expat 2.2.6 he6710b0_0 fastcache 1.0.2 py37h14c3975_2 ffmpeg 4.1.3 h167e202_0 conda-forge filelock 3.0.10 py37_0 flask 1.1.2 py_0 flask-compress 1.4.0 py_0 flask-login 0.5.0 py_0 anaconda flask-socketio 4.3.0 pypi_0 pypi flask-wtf 0.14.3 pypi_0 pypi fontconfig 2.13.1 he4413a7_1000 conda-forge freetype 2.9.1 h8a8886c_1 fribidi 1.0.5 h7b6447c_0 fsspec 0.7.1 py_0 future 0.17.1 py37_0 gast 0.3.3 py_0 gcc_impl_linux-64 7.3.0 habb00fd_1 gcc_linux-64 7.3.0 h553295d_15 get_terminal_size 1.0.0 haa9412d_0 gettext 0.19.8.1 hc5be6a0_1002 conda-forge gevent 1.4.0 py37h7b6447c_0 gevent-websocket 0.10.1 pypi_0 pypi gfortran_impl_linux-64 7.3.0 hdf63c60_1 gfortran_linux-64 7.3.0 h553295d_15 giflib 5.1.9 h516909a_0 conda-forge glib 2.58.3 py37h6f030ca_1002 conda-forge glob2 0.6 py37_1 gmp 6.1.2 h6c8ec71_1 gmpy2 2.0.8 py37h10f8cd9_2 gnutls 3.6.13 h79a8f9a_0 conda-forge google-pasta 0.2.0 py_0 graphite2 1.3.13 h23475e2_0 greenlet 0.4.15 py37h7b6447c_0 grpcio 1.27.2 py37hf8bcb03_0 anaconda gsl 2.5 h294904e_1 conda-forge gst-plugins-base 1.14.0 hbbd80ab_1 gstreamer 1.14.0 hb453b48_1 gunicorn 20.0.4 py37_0 gxx_impl_linux-64 7.3.0 hdf63c60_1 gxx_linux-64 7.3.0 h553295d_15 h5py 2.10.0 py37h7918eee_0 harfbuzz 2.4.0 h37c48d4_1 conda-forge hdf5 1.10.4 hb1b8bf9_0 heapdict 1.0.0 py37_2 html5lib 1.0.1 py37_0 icu 58.2 h9c2bf20_1 identify 2.1.4 pyhd8ed1ab_0 conda-forge idna 2.9 py_1 imageio 2.5.0 py37_0 imagesize 1.1.0 py37_0 importlib-metadata 0.19 py37_0 conda-forge importlib_metadata 0.8 py37_0 intel-openmp 2019.3 199 ipykernel 5.1.0 py37h39e3cac_0 ipython 7.4.0 py37h39e3cac_0 ipython_genutils 0.2.0 py37_0 ipywidgets 7.4.2 py37_0 isodate 0.6.0 py_1 isort 4.3.16 py37_0 itsdangerous 1.1.0 py37_0 jasper 1.900.1 h07fcdf6_1006 conda-forge jbig 2.1 hdba287a_0 jdcal 1.4 py37_0 jedi 0.13.3 py37_0 jeepney 0.4 py37_0 jinja2 2.11.2 py_0 joblib 0.14.1 py_0 jpeg 9d h516909a_0 conda-forge json5 0.9.4 py_0 jsonschema 3.0.1 py37_0 jupyter 1.0.0 py37h06a4308_8 jupyter_client 5.2.4 py37_0 jupyter_console 6.0.0 py37_0 jupyter_core 4.4.0 py37_0 jupyterlab 0.35.4 py37hf63ae98_0 jupyterlab_server 0.2.0 py37_0 keras 2.3.1 0 keras-applications 1.0.8 py_0 keras-base 2.3.1 py37_0 keras-preprocessing 1.1.0 py_1 keyring 18.0.0 py37_0 kiwisolver 1.2.0 py37hfd86e86_0 krb5 1.16.4 h2fd8d38_0 conda-forge lame 3.100 h14c3975_1001 conda-forge lazy-object-proxy 1.3.1 py37h14c3975_2 ld_impl_linux-64 2.33.1 h53a641e_7 leather 0.3.3 py37_0 libarchive 3.3.3 h5d8350f_5 libblas 3.8.0 15_mkl conda-forge libcblas 3.8.0 15_mkl conda-forge libcurl 7.68.0 hda55be3_0 conda-forge libedit 3.1.20181209 hc058e9b_0 libffi 3.2.1 hd88cf55_4 libgcc-ng 8.2.0 hdf63c60_1 libgfortran-ng 7.3.0 hdf63c60_0 libiconv 1.15 h516909a_1006 conda-forge liblapack 3.8.0 15_mkl conda-forge liblapacke 3.8.0 15_mkl conda-forge liblief 0.9.0 h7725739_2 libpng 1.6.37 hbc83047_0 libprotobuf 3.11.3 hd408876_0 libsodium 1.0.16 h1bed415_0 libssh2 1.9.0 h1ba5d50_1 libstdcxx-ng 8.2.0 hdf63c60_1 libtiff 4.0.10 h2733197_2 libtool 2.4.6 h7b6447c_5 libuuid 2.32.1 h14c3975_1000 conda-forge libwebp 1.0.2 h576950b_1 conda-forge libxcb 1.13 h1bed415_1 libxml2 2.9.9 he19cac6_0 libxslt 1.1.33 h7d1a2b0_0 llvmlite 0.28.0 py37hd408876_0 locket 0.2.0 py37_1 lxml 4.5.0 py37hefd8a0e_0 lz4-c 1.8.1.2 h14c3975_0 lzo 2.10 h49e0be7_2 make 4.2.1 h1bed415_1 markdown 3.1.1 py37_0 anaconda markupsafe 1.1.1 py37h7b6447c_0 matplotlib 3.1.3 py37_0 matplotlib-base 3.1.3 py37hef1b27d_0 mccabe 0.6.1 py37_1 mistune 0.8.4 py37h7b6447c_0 mkl 2020.1 217 mkl-service 2.3.0 py37he904b0f_0 mkl_fft 1.0.10 py37ha843d7b_0 mkl_random 1.0.2 py37hd81dba3_0 mock 4.0.2 py_0 more-itertools 6.0.0 py37_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.1 hdf1c602_3 mplcursors 0.3 py_0 conda-forge mpmath 1.1.0 py37_0 msgpack-python 0.6.1 py37hfd86e86_1 multipledispatch 0.6.0 py37_0 navigator-updater 0.2.1 py37_0 nbconvert 5.4.1 py37_3 nbformat 4.4.0 py37_0 ncurses 6.1 he6710b0_1 neovim 0.3.1 py37hc8dfbb8_1 conda-forge nettle 3.4.1 h1bed415_1002 conda-forge networkx 2.2 py37_1 nltk 3.4 py37_1 nodeenv 1.6.0 pyhd8ed1ab_0 conda-forge nodejs 10.13.0 he6710b0_0 nose 1.3.7 py37_2 notebook 5.7.8 py37_0 numba 0.43.1 py37h962f231_0 numexpr 2.6.9 py37h9e4a6bb_0 numpy 1.16.3 py37h7e9f1db_0 numpy-base 1.16.3 py37hde5b4d6_0 numpydoc 0.8.0 py37_0 olefile 0.46 py37_0 opencv 4.1.0 py37h5517eff_4 conda-forge openh264 1.8.0 hdbcaa40_1000 conda-forge openpyxl 2.6.1 py37_1 openssl 1.1.1q h7f8727e_0 packaging 19.0 py37_0 pandas 1.0.3 py37h0573a6f_0 pandas-datareader 0.7.0 py37_0 pandoc 2.2.3.2 0 pandocfilters 1.4.2 py37_1 pango 1.40.14 he7ab937_1005 conda-forge parsedatetime 2.4 py37_0 parso 0.3.4 py37_0 partd 0.3.10 py37_1 patchelf 0.9 he6710b0_3 path.py 11.5.0 py37_0 pathlib2 2.3.3 py37_0 patsy 0.5.1 py37_0 pcre 8.43 he6710b0_0 pep8 1.7.1 py37_0 pexpect 4.6.0 py37_0 pickleshare 0.7.5 py37_0 pillow 6.2.1 py37h34e0f95_0 anaconda pip 19.0.3 py37_0 pixman 0.38.0 h7b6447c_0 pkginfo 1.5.0.1 py37_0 plotly 3.8.1 py_0 pluggy 0.9.0 py37_0 ply 3.11 py37_0 pre-commit 2.13.0 py37h89c1867_0 conda-forge prometheus_client 0.6.0 py37_0 prompt_toolkit 2.0.9 py37_0 protobuf 3.11.3 py37he6710b0_0 psutil 5.6.1 py37h7b6447c_0 ptyprocess 0.6.0 py37_0 py 1.8.0 py37_0 py-lief 0.9.0 py37h7725739_2 pycodestyle 2.5.0 py37_0 pycosat 0.6.3 py37h14c3975_0 pycparser 2.19 py37_0 pycrypto 2.6.1 py37h14c3975_9 pycurl 7.43.0.2 py37h1ba5d50_0 pyflakes 2.1.1 py37_0 pygments 2.3.1 py37_0 pylint 2.3.1 py37_0 pynvim 0.4.1 py37hc8dfbb8_1 conda-forge pyodbc 4.0.26 py37he6710b0_0 pyopenssl 19.0.0 py37_0 pyparsing 2.4.7 py_0 pyqt 5.9.2 py37h05f1152_2 pyrsistent 0.14.11 py37h7b6447c_0 pysocks 1.6.8 py37_0 pytables 3.5.1 py37h71ec239_0 pytest 4.3.1 py37_0 pytest-arraydiff 0.3 py37h39e3cac_0 pytest-astropy 0.5.0 py37_0 pytest-doctestplus 0.3.0 py37_0 pytest-openfiles 0.3.2 py37_0 pytest-remotedata 0.3.1 py37_0 python 3.7.6 h8356626_5_cpython conda-forge python-dateutil 2.8.1 py_0 python-engineio 3.13.0 pypi_0 pypi python-libarchive-c 2.8 py37_6 python-slugify 3.0.4 py_0 python-socketio 4.6.0 pypi_0 pypi python_abi 3.7 1_cp37m conda-forge pytimeparse 1.1.8 py37_0 pytz 2019.3 py_0 pywavelets 1.0.2 py37hdd07704_0 pyyaml 5.1 py37h7b6447c_0 pyzmq 18.0.0 py37he6710b0_0 qt 5.9.7 h5867ecd_1 qtawesome 0.5.7 py37_1 qtconsole 4.4.3 py37_0 qtpy 1.7.0 py37_1 r-alphavantageclient 0.0.1 r36h6115d3f_0 r r-askpass 1.0 r36h14c3975_0 r r-base 3.6.1 h8900bf8_2 conda-forge r-curl 3.3 r36h96ca727_0 r r-httr 1.4.0 r36h6115d3f_0 r r-jsonlite 1.6 r36h96ca727_0 r r-lattice 0.20_38 r36h96ca727_0 r r-mime 0.6 r36h96ca727_0 r r-openssl 1.3 r36h96ca727_0 r r-r6 2.4.0 r36h6115d3f_0 r r-sys 3.2 r36h96ca727_0 r r-xts 0.11_2 r36h96ca727_0 r r-zoo 1.8_6 r36h96ca727_0 r readline 8.0 hf8c457e_0 conda-forge requests 2.23.0 py37_0 retrying 1.3.3 py37_2 ripgrep 11.0.2 he32d670_0 rope 0.12.0 py37_0 ruamel_yaml 0.15.46 py37h14c3975_0 scikit-image 0.14.2 py37he6710b0_0 scikit-learn 0.22.1 py37hd81dba3_0 scipy 1.4.1 py37h0b6359f_0 seaborn 0.9.0 py37_0 secretstorage 3.1.1 py37_0 sed 4.7 h1bed415_1000 conda-forge selenium 3.141.0 py37h7b6447c_0 send2trash 1.5.0 py37_0 setuptools 40.8.0 py37_0 simplegeneric 0.8.1 py37_2 singledispatch 3.4.0.3 py37_0 sip 4.19.8 py37hf484d3e_0 six 1.14.0 py37_0 snappy 1.1.7 hbae5bb6_3 snowballstemmer 1.2.1 py37_0 sortedcollections 1.1.2 py37_0 sortedcontainers 2.1.0 py37_0 soupsieve 2.0 py_0 sphinx 1.8.5 py37_0 sphinxcontrib 1.0 py37_1 sphinxcontrib-applehelp 1.0.2 py_0 sphinxcontrib-devhelp 1.0.2 py_0 sphinxcontrib-htmlhelp 1.0.3 py_0 sphinxcontrib-jsmath 1.0.1 py_0 sphinxcontrib-qthelp 1.0.3 py_0 sphinxcontrib-serializinghtml 1.1.4 py_0 sphinxcontrib-websupport 1.1.0 py37_1 spyder 3.3.3 py37_0 spyder-kernels 0.4.2 py37_0 sqlalchemy 1.3.1 py37h7b6447c_0 sqlite 3.30.1 hcee41ef_0 conda-forge sqlparse 0.3.1 py_0 statsmodels 0.9.0 py37h035aef0_0 sympy 1.3 py37_0 tbb 2020.0 hfd86e86_0 tblib 1.3.2 py37_0 tensorboard 1.14.0 py37hf484d3e_0 tensorflow 1.14.0 mkl_py37h45c423b_0 tensorflow-base 1.14.0 mkl_py37h7ce6ba3_0 tensorflow-estimator 1.14.0 py_0 termcolor 1.1.0 py37_1 terminado 0.8.1 py37_1 testpath 0.4.2 py37_0 text-unidecode 1.3 py_0 tk 8.6.10 hbc83047_0 anaconda tktable 2.10 h14c3975_0 toml 0.10.2 pyhd8ed1ab_0 conda-forge toolz 0.9.0 py37_0 tornado 6.0.2 py37h7b6447c_0 tqdm 4.31.1 py37_1 traitlets 4.3.2 py37_0 tzlocal 2.0.0 py37_0 unicodecsv 0.14.1 py37_0 unidecode 1.1.1 py_0 unixodbc 2.3.7 h14c3975_0 urllib3 1.25.9 py_0 virtualenv 20.4.7 py37h89c1867_0 conda-forge wcwidth 0.1.7 py37_0 webencodings 0.5.1 py37_1 werkzeug 1.0.0 pypi_0 pypi wheel 0.33.1 py37_0 widgetsnbextension 3.4.2 py37_0 wrapt 1.12.1 py37h7b6447c_1 wtforms 2.3.1 pypi_0 pypi wurlitzer 1.0.2 py37_0 x264 1!152.20180806 h14c3975_0 conda-forge xlrd 1.2.0 py37_0 xlsxwriter 1.1.5 py37_0 xlwt 1.3.0 py37_0 xorg-kbproto 1.0.7 h14c3975_1002 conda-forge xorg-libice 1.0.10 h516909a_0 conda-forge xorg-libsm 1.2.3 h84519dc_1000 conda-forge xorg-libx11 1.6.9 h516909a_0 conda-forge xorg-libxext 1.3.4 h516909a_0 conda-forge xorg-libxrender 0.9.10 h516909a_1002 conda-forge xorg-renderproto 0.11.1 h14c3975_1002 conda-forge xorg-xextproto 7.3.0 h14c3975_1002 conda-forge xorg-xproto 7.0.31 h14c3975_1007 conda-forge xz 5.2.4 h14c3975_4 yaml 0.1.7 had09818_2 zeromq 4.3.1 he6710b0_3 zict 0.1.4 py37_0 zipp 0.3.3 py37_1 zlib 1.2.11 h7b6447c_3 zstd 1.3.7 h0b5b093_0 . !conda info . active environment : base active env location : /home/aadit/anaconda3 shell level : 1 user config file : /home/aadit/.condarc populated config files : /home/aadit/.condarc conda version : 4.12.0 conda-build version : 3.17.8 python version : 3.7.6.final.0 virtual packages : __linux=5.10.102.1=0 __glibc=2.31=0 __unix=0=0 __archspec=1=x86_64 base environment : /home/aadit/anaconda3 (writable) conda av data dir : /home/aadit/anaconda3/etc/conda conda av metadata url : None channel URLs : https://repo.anaconda.com/pkgs/main/linux-64 https://repo.anaconda.com/pkgs/main/noarch https://repo.anaconda.com/pkgs/r/linux-64 https://repo.anaconda.com/pkgs/r/noarch package cache : /home/aadit/anaconda3/pkgs /home/aadit/.conda/pkgs envs directories : /home/aadit/anaconda3/envs /home/aadit/.conda/envs platform : linux-64 user-agent : conda/4.12.0 requests/2.23.0 CPython/3.7.6 Linux/5.10.102.1-microsoft-standard-WSL2 ubuntu/20.04.2 glibc/2.31 UID:GID : 1000:1000 netrc file : /home/aadit/.netrc offline mode : False . git status: shows modified files in a repository git add .: adds all modified files into commit git commit -m &quot;message&quot;: creates a new commit with the message &quot;message&quot; git push: pushes the commit to remote repository, which in this case is Github . git add . echo &quot;Please give a commit message&quot; read commit git commit -m &quot;$commit&quot; git push # Automating push procedure .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/08/25/bash.html",
            "relUrl": "/unit-work/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Primitives Notebook",
            "content": "import java.util.Scanner; // initialize class public class Temperature { public static void main(String[] args) { // initialize scanner input Scanner input; // initialize fahrenheit double. Stores fahrenheit converted value double fahrenheit = 0.0; // initialize celsius double. Stores celsius value from user double celsius = 0.0; // initialize finalString String. Stores combined string with casting. String finalString; // initialize correctDouble double. Stores boolean value when double is correct. boolean correctDouble; // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a temperature in Celsius: &quot;); try { celsius = input.nextDouble(); System.out.println(celsius); // sets variable to True meaning the double entered is correct correctDouble = true; } catch (Exception e) { // if not a number correctDouble = false; } input.close(); // Kills prompt if value is not a double if(!correctDouble) { System.out.println(&quot; nNot a double! Please try again&quot;); return; } // Mathematics for converting celsius to fahrenheit fahrenheit = ((celsius * 9) / 5) + 32; // final formatted string with both variables finalString = &quot;The temperature of &quot; + celsius + &quot; degrees celsius is equal to &quot; + fahrenheit + &quot; degrees farenheit&quot;; System.out.println(&quot;The temperature of &quot; + celsius + &quot; degrees celsius is equal to &quot; + fahrenheit + &quot; degrees farenheit&quot;); } } Temperature.main(null); . Enter a temperature in Celsius: 13.0 The temperature of 13.0 degrees celsius is equal to 55.4 degrees farenheit .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/08/23/primitives.html",
            "relUrl": "/unit-work/2022/08/23/primitives.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "TT 1.0 Tools and Equipment",
            "content": "Hacks . Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | | Github Insights for FastPages | Github Insights for CSA Project | . Part 2 Java Project . . CSA Portfolio Commit | . Issue Ticket #1 .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/08/18/tools.html",
            "relUrl": "/unit-work/2022/08/18/tools.html",
            "date": " • Aug 18, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Python Jupyter Notebook",
            "content": "print (&quot;Hello&quot;) . Hello .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/08/17/python.html",
            "relUrl": "/unit-work/2022/08/17/python.html",
            "date": " • Aug 17, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Java Jupyter Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello&quot;); } } HelloWorld.main(null) . Hello .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/unit-work/2022/08/17/java.html",
            "relUrl": "/unit-work/2022/08/17/java.html",
            "date": " • Aug 17, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post40": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://aaditgupta21.github.io/fastpages-CSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://aaditgupta21.github.io/fastpages-CSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes for CSA",
          "content": "Key Vocab . Primitives char | int | double | boolean | short | long | . | Non Primitives String | Array | ArrayList | Queue | Stack | . | .",
          "url": "https://aaditgupta21.github.io/fastpages-CSA/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "NBA Teams",
          "content": "&lt;!DOCTYPE html&gt; . NBA Teams . NBA Teams . Team Name Team Logo Conference Division City . .",
          "url": "https://aaditgupta21.github.io/fastpages-CSA/nbateams",
          "relUrl": "/nbateams",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aaditgupta21.github.io/fastpages-CSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}